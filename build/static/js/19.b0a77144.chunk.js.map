{"version":3,"sources":["hooks/useIsVisible.js","hooks/useStickySWR.js","components/Home.js"],"names":["OPTIONS","root","rootMargin","threshold","useIsVisible","elementRef","useState","isVisible","setIsVisible","useEffect","current","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","unobserve","observe","useStickySWR","key","fetcher","swrOptions","options","setOptions","args","useSWR","data","isValidating","error","rest","useUpdateEffect","produce","draftOptions","initialData","Actions","lazy","retry","MapSwitcher","Level","Minigraphs","StateHeader","MapExplorer","Home","stateCode","districtName","regionHighlighted","setRegionHighlighted","useLocalStorage","anchor","setAnchor","expandTable","useSessionStorage","mapStatistic","setMapStatistic","date","setDate","location","useLocation","MAP_VIEWS","DISTRICTS","mapView","setMapView","hideDistrictData","DISTRICT_START_DATE","hideDistrictTestData","formatISO","addDays","parseSaudiaDate","DISTRICT_TEST_END_DATE","TESTED_EXPIRING_DAYS","representation","timeseries","DATA_API_ROOT","revalidateOnMount","refreshInterval","API_REFRESH_INTERVAL","homeRightElement","useRef","width","useWindowSize","hideVaccinated","getStatistic","lastDataDate","useMemo","updatedDates","meta","tested","vaccinated","filter","length","max","map","lastUpdatedDate","Object","keys","datetime","formatDateObjSaudia","noDistrictDataStates","reduce","res","stateData","districts","UNKNOWN_DISTRICT_KEY","PRIMARY_STATISTICS","every","statistic","noRegionHighlightedDistrictData","Helmet","name","content","className","classnames","expanded","fallback","style","height","minHeight","dates","position","marginTop","ref","hash","stickied"],"mappings":"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","file":"static/js/19.b0a77144.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst OPTIONS = {\n  root: null,\n  rootMargin: \"0px 0px 0px 0px\",\n  threshold: 0,\n};\n\nconst useIsVisible = (elementRef) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    if (elementRef.current) {\n      const observer = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setIsVisible(true);\n            observer.unobserve(elementRef.current);\n          }\n        });\n      }, OPTIONS);\n      observer.observe(elementRef.current);\n    }\n  }, [elementRef]);\n\n  return isVisible;\n};\n\nexport default useIsVisible;\n","import produce from \"immer\";\nimport { useState } from \"react\";\nimport { useUpdateEffect } from \"react-use\";\nimport useSWR from \"swr\";\n\nexport function useStickySWR(key, fetcher, swrOptions, ...args) {\n  const [options, setOptions] = useState(swrOptions);\n\n  const { data, isValidating, error, ...rest } = useSWR(\n    key,\n    fetcher,\n    options,\n    ...args\n  );\n\n  useUpdateEffect(() => {\n    setOptions(\n      produce(options, (draftOptions) => {\n        draftOptions.initialData = data;\n      })\n    );\n  }, [data]);\n\n  return {\n    ...rest,\n    isValidating,\n    error,\n    data,\n  };\n}\n\nexport default useStickySWR;\n","import {\n  API_REFRESH_INTERVAL,\n  DATA_API_ROOT,\n  DISTRICT_START_DATE,\n  DISTRICT_TEST_END_DATE,\n  MAP_VIEWS,\n  TESTED_EXPIRING_DAYS,\n  PRIMARY_STATISTICS,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport useIsVisible from '../hooks/useIsVisible';\nimport useStickySWR from '../hooks/useStickySWR';\nimport {\n  getStatistic,\n  fetcher,\n  retry,\n  parseSaudiaDate,\n  formatDateObjSaudia,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {addDays, formatISO, max} from 'date-fns';\nimport {useMemo, useRef, useState, lazy, Suspense} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {useLocation} from 'react-router-dom';\nimport {useLocalStorage, useSessionStorage, useWindowSize} from 'react-use';\n\nconst Actions = lazy(() => retry(() => import('./Actions')));\nconst MapSwitcher = lazy(() => retry(() => import('./MapSwitcher')));\nconst Level = lazy(() => retry(() => import('./Level')));\nconst Minigraphs = lazy(() => retry(() => import('./Minigraphs')));\nconst StateHeader = lazy(() => retry(() => import('./StateHeader')));\nconst MapExplorer = lazy(() => retry(() => import('./MapExplorer')));\n\nfunction Home() {\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    stateCode: 'TT',\n    districtName: null,\n  });\n  const [anchor, setAnchor] = useLocalStorage('anchor', null);\n  const [expandTable] = useLocalStorage('expandTable', false);\n\n  const [mapStatistic, setMapStatistic] = useSessionStorage(\n    'mapStatistic',\n    'active'\n  );\n\n  const [date, setDate] = useState('');\n  const location = useLocation();\n\n  const [mapView, setMapView] = useLocalStorage('mapView', MAP_VIEWS.DISTRICTS);\n\n  const hideDistrictData = date !== '' && date < DISTRICT_START_DATE;\n  const hideDistrictTestData =\n    date === '' ||\n    date >\n      formatISO(\n        addDays(parseSaudiaDate(DISTRICT_TEST_END_DATE), TESTED_EXPIRING_DAYS),\n        {representation: 'date'}\n      );\n\n  const {data: timeseries} = useStickySWR(\n    `${DATA_API_ROOT}/timeseries.min.json`,\n    fetcher,\n    {\n      revalidateOnMount: true,\n      refreshInterval: API_REFRESH_INTERVAL,\n    }\n  );\n\n  const {data} = useStickySWR(\n    `${DATA_API_ROOT}/data${date ? `-${date}` : ''}.min.json`,\n    fetcher,\n    {\n      revalidateOnMount: true,\n      refreshInterval: API_REFRESH_INTERVAL,\n    }\n  );\n\n  const homeRightElement = useRef();\n  const isVisible = useIsVisible(homeRightElement);\n  const {width} = useWindowSize();\n\n  const hideVaccinated =\n    getStatistic(data?.['TT'], 'total', 'vaccinated') === 0;\n\n  const lastDataDate = useMemo(() => {\n    const updatedDates = [\n      data?.['TT']?.meta?.date,\n      data?.['TT']?.meta?.tested?.date,\n      data?.['TT']?.meta?.vaccinated?.date,\n    ].filter((date) => date);\n    return updatedDates.length > 0\n      ? formatISO(max(updatedDates.map((date) => parseSaudiaDate(date))), {\n          representation: 'date',\n        })\n      : null;\n  }, [data]);\n\n  const lastUpdatedDate = useMemo(() => {\n    const updatedDates = Object.keys(data || {})\n      .map((stateCode) => data?.[stateCode]?.meta?.['last_updated'])\n      .filter((datetime) => datetime);\n    return updatedDates.length > 0\n      ? formatDateObjSaudia(\n          max(updatedDates.map((datetime) => parseSaudiaDate(datetime)))\n        )\n      : null;\n  }, [data]);\n\n  const noDistrictDataStates = useMemo(\n    () =>\n      // Heuristic: All cases are in Unknown\n      Object.entries(data || {}).reduce((res, [stateCode, stateData]) => {\n        res[stateCode] = !!(\n          stateData?.districts &&\n          stateData.districts?.[UNKNOWN_DISTRICT_KEY] &&\n          PRIMARY_STATISTICS.every(\n            (statistic) =>\n              getStatistic(stateData, 'total', statistic) ===\n              getStatistic(\n                stateData.districts[UNKNOWN_DISTRICT_KEY],\n                'total',\n                statistic\n              )\n          )\n        );\n        return res;\n      }, {}),\n    [data]\n  );\n\n  const noRegionHighlightedDistrictData =\n    regionHighlighted?.stateCode &&\n    regionHighlighted?.districtName &&\n    regionHighlighted.districtName !== UNKNOWN_DISTRICT_KEY &&\n    noDistrictDataStates[regionHighlighted.stateCode];\n\n  return (\n    <>\n      <Helmet>\n        <title>Coronavirus Outbreak in Saudia - Saudi.org</title>\n        <meta\n          name=\"title\"\n          content=\"Coronavirus Outbreak in Saudia: Latest Map and Case Count\"\n        />\n      </Helmet>\n\n      <div className=\"Home\">\n        <div className={classnames('home-left', {expanded: expandTable})}>\n          <div className=\"header\">\n            <Suspense fallback={<div />}></Suspense>\n\n            {!data && !timeseries && <div style={{height: '60rem'}} />}\n\n            <>\n              {!timeseries && <div style={{minHeight: '61px'}} />}\n              {timeseries && (\n                <Suspense fallback={<div style={{minHeight: '61px'}} />}>\n                  <Actions\n                    {...{\n                      date,\n                      setDate,\n                      dates: Object.keys(timeseries['TT']?.dates),\n                      lastUpdatedDate,\n                    }}\n                  />\n                </Suspense>\n              )}\n            </>\n          </div>\n\n          <div style={{position: 'relative', marginTop: '1rem'}}>\n            {data && (\n              <Suspense fallback={<div style={{height: '50rem'}} />}>\n                {width >= 769 && !expandTable && (\n                  <MapSwitcher {...{mapStatistic, setMapStatistic}} />\n                )}\n                <Level data={data['TT']} />\n              </Suspense>\n            )}\n\n            <>\n              {!timeseries && <div style={{height: '123px'}} />}\n              {timeseries && (\n                <Suspense fallback={<div style={{height: '123px'}} />}>\n                  <Minigraphs\n                    timeseries={timeseries['TT']?.dates}\n                    {...{date}}\n                  />\n                </Suspense>\n              )}\n            </>\n          </div>\n        </div>\n\n        <div\n          className={classnames('home-right', {expanded: expandTable})}\n          ref={homeRightElement}\n          style={{minHeight: '4rem'}}\n        >\n          {(isVisible || location.hash) && (\n            <>\n              {data && (\n                <div\n                  className={classnames('map-container', {\n                    expanded: expandTable,\n                    stickied:\n                      anchor === 'mapexplorer' || (expandTable && width >= 769),\n                  })}\n                >\n                  <Suspense fallback={<div style={{height: '50rem'}} />}>\n                    <StateHeader data={data['TT']} stateCode={'TT'} />\n                    <MapExplorer\n                      {...{\n                        stateCode: 'TT',\n                        data,\n                        mapStatistic,\n                        setMapStatistic,\n                        mapView,\n                        setMapView,\n                        regionHighlighted,\n                        setRegionHighlighted,\n                        anchor,\n                        setAnchor,\n                        expandTable,\n                        lastDataDate,\n                        hideDistrictData,\n                        hideDistrictTestData,\n                        hideVaccinated,\n                        noRegionHighlightedDistrictData,\n                      }}\n                    />\n                  </Suspense>\n                </div>\n              )}\n\n              {timeseries && (\n                <Suspense\n                  fallback={<div style={{height: '50rem'}} />}\n                ></Suspense>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n\n      {isVisible && <Suspense fallback={<div />}></Suspense>}\n    </>\n  );\n}\n\nexport default Home;\n"],"sourceRoot":""}
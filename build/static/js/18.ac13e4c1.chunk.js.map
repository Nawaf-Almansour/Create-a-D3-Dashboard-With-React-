{"version":3,"sources":["components/Calendar.js"],"names":["Calendar","date","dates","slider","useState","view","setView","parseSaudiaDate","activeStartDate","setActiveStartDate","minDate","maxDate","length","handleNavigation","direction","newDate","add","months","years","lower","startOfMonth","startOfYear","upper","endOfMonth","endOfYear","swipeHandlers","useSwipeable","onSwipedRight","bind","this","onSwipedLeft","className","onWheel","event","deltaX","Math","sign","value","tileDisabled","includes","formatISO","representation","onActiveStartDateChange","onViewChange","minDetail","showFixedNumberOfWeeks","onChange","clickedDate","moveToSlide","indexOf","prevLabel","size","nextLabel","prev2Label","next2Label","isEqual","prevProps","currProps","equal","memo"],"mappings":"6QAqBA,SAASA,EAAT,GAA4C,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OAC/B,EAAwBC,mBAAS,SAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8CF,mBAASG,YAAgBN,IAAvE,mBAAOO,EAAP,KAAwBC,EAAxB,KAEMC,EAAUH,YAAgBL,EAAM,IAChCS,EAAUJ,YAAgBL,EAAMA,EAAMU,OAAS,IAsB/CC,EAAmB,SAACC,GACxB,IAAMC,EAAUC,YACdR,EACS,UAATH,EAAmB,CAAEY,OAAQH,GAAc,CAAEI,MAAOJ,IAEhDK,EACK,UAATd,EAAmBe,YAAaV,GAAWW,YAAYX,GACnDY,EAAiB,UAATjB,EAAmBkB,YAAWZ,GAAWa,YAAUb,GAC7DQ,GAASJ,GAAWA,GAAWO,GACjCb,EAAmBM,IAIjBU,EAAgBC,uBAAa,CACjCC,cAAed,EAAiBe,KAAKC,MAAO,GAC5CC,aAAcjB,EAAiBe,KAAKC,KAAM,KAS5C,OACE,6CAAKE,UAAU,WAAWC,QAPR,SAACC,GACE,IAAjBA,EAAMC,QACRrB,EAAiBsB,KAAKC,KAAKH,EAAMC,WAKiBT,GAApD,aACE,cAAC,IAAD,CACEY,MAAO9B,YAAgBN,GACvBqC,aAhDiB,SAAC,GAAoB,IAAlBrC,EAAiB,EAAjBA,KACxB,MACW,UAF8B,EAAXI,OAG3BH,EAAMqC,SAASC,YAAUvC,EAAM,CAAEwC,eAAgB,WA8C1C/B,UAASC,UAASH,kBAAiBH,OACzCqC,wBAlCyB,SAAC,GAAyB,IAAvBlC,EAAsB,EAAtBA,gBAChCC,EAAmBD,IAkCfmC,aAvCmB,SAAC,GAAc,IAAZtC,EAAW,EAAXA,KAC1BC,EAAQD,IAuCJuC,UAAU,OACVC,wBAAsB,EACtBC,SA/CsB,SAACT,GAC3B,IAAMU,EAAcP,YAAUH,EAAO,CAAEI,eAAgB,SACvDtC,EAAO6C,YAAY9C,EAAM+C,QAAQF,KA8C7BG,UACE,8BACE,cAAC,IAAD,CAAaC,KAAM,OAGvBC,UACE,8BACE,cAAC,IAAD,CAAcD,KAAM,OAGxBE,WACE,8BACE,cAAC,IAAD,CAAcF,KAAM,OAGxBG,WACE,8BACE,cAAC,IAAD,CAAeH,KAAM,YAQjC,IAAMI,EAAU,SAACC,EAAWC,GAC1B,QAAKC,IAAMD,EAAUxD,KAAMuD,EAAUvD,SAEzByD,IAAMD,EAAUvD,MAAOsD,EAAUtD,QAMhCyD,yBAAK3D,EAAUuD","file":"static/js/18.ac13e4c1.chunk.js","sourcesContent":["import { parseSaudiaDate } from \"../utils/commonFunctions\";\n\nimport {\n  add,\n  formatISO,\n  startOfMonth,\n  startOfYear,\n  endOfMonth,\n  endOfYear,\n} from \"date-fns\";\nimport equal from \"fast-deep-equal\";\nimport { memo, useState } from \"react\";\nimport ReactCalendar from \"react-calendar\";\nimport {\n  ChevronLeft,\n  ChevronsLeft,\n  ChevronRight,\n  ChevronsRight,\n} from \"react-feather\";\nimport { useSwipeable } from \"react-swipeable\";\n\nfunction Calendar({ date, dates, slider }) {\n  const [view, setView] = useState(\"month\");\n  const [activeStartDate, setActiveStartDate] = useState(parseSaudiaDate(date));\n\n  const minDate = parseSaudiaDate(dates[0]);\n  const maxDate = parseSaudiaDate(dates[dates.length - 1]);\n\n  const isDateDisabled = ({ date, view }) => {\n    return (\n      view === \"month\" &&\n      !dates.includes(formatISO(date, { representation: \"date\" }))\n    );\n  };\n\n  const handleCalendarClick = (value) => {\n    const clickedDate = formatISO(value, { representation: \"date\" });\n    slider.moveToSlide(dates.indexOf(clickedDate));\n  };\n\n  const handleViewButton = ({ view }) => {\n    setView(view);\n  };\n\n  const handleNavigationButton = ({ activeStartDate }) => {\n    setActiveStartDate(activeStartDate);\n  };\n\n  const handleNavigation = (direction) => {\n    const newDate = add(\n      activeStartDate,\n      view === \"month\" ? { months: direction } : { years: direction }\n    );\n    const lower =\n      view === \"month\" ? startOfMonth(minDate) : startOfYear(minDate);\n    const upper = view === \"month\" ? endOfMonth(maxDate) : endOfYear(maxDate);\n    if (lower <= newDate && newDate <= upper) {\n      setActiveStartDate(newDate);\n    }\n  };\n\n  const swipeHandlers = useSwipeable({\n    onSwipedRight: handleNavigation.bind(this, -1),\n    onSwipedLeft: handleNavigation.bind(this, 1),\n  });\n\n  const handleWheel = (event) => {\n    if (event.deltaX !== 0) {\n      handleNavigation(Math.sign(event.deltaX));\n    }\n  };\n\n  return (\n    <div className=\"Calendar\" onWheel={handleWheel} {...swipeHandlers}>\n      <ReactCalendar\n        value={parseSaudiaDate(date)}\n        tileDisabled={isDateDisabled}\n        {...{ minDate, maxDate, activeStartDate, view }}\n        onActiveStartDateChange={handleNavigationButton}\n        onViewChange={handleViewButton}\n        minDetail=\"year\"\n        showFixedNumberOfWeeks\n        onChange={handleCalendarClick}\n        prevLabel={\n          <div>\n            <ChevronLeft size={18} />\n          </div>\n        }\n        nextLabel={\n          <div>\n            <ChevronRight size={18} />\n          </div>\n        }\n        prev2Label={\n          <div>\n            <ChevronsLeft size={18} />\n          </div>\n        }\n        next2Label={\n          <div>\n            <ChevronsRight size={18} />\n          </div>\n        }\n      />\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Calendar, isEqual);\n"],"sourceRoot":""}
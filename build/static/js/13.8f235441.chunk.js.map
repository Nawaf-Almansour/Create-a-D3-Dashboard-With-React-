{"version":3,"sources":["components/Navbar.js","App.js"],"names":["Navbar","showLanguageSwitcher","pages","setShowLanguageSwitcher","t","useTranslation","useState","expand","setExpand","useLockBodyScroll","windowSize","useWindowSize","usePageLeave","navbarTransition","useTransition","from","opacity","enter","handleMouseEnter","useCallback","width","handleLanguageSwitcher","style","item","div","className","onClick","to","bind","onMouseEnter","activeNavIcon","path","stroke","window","location","pathname","Home","lazy","retry","About","App","useLocation","pageLink","view","displayName","showInNavbar","useEffect","document","documentElement","scrollTo","top","behavior","body","fallback","map","page","index","exact","render","match"],"mappings":"8PAuEeA,MAhEf,YAA2E,IAAD,OAAjDC,GAAiD,EAAxDC,MAAwD,EAAjDD,sBAAsBE,EAA2B,EAA3BA,wBACtCC,EAAKC,cAALD,EACP,EAA4BE,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,YAAkBF,GAClB,IAAMG,EAAaC,cAEnBC,aAAa,kBAAMJ,GAAU,MAE7B,IAAMK,EAAmBC,yBAAc,EAAM,CAC3CC,KAAM,CAAEC,QAAS,GACjBC,MAAO,CAAED,QAAS,KAGdE,EAAmBC,uBAAY,WAC/BT,EAAWU,OAAS,KACtBZ,GAAU,KAEX,CAACE,EAAWU,QAETC,EAAyBF,uBAAY,WACrCZ,GAAQC,GAAU,GACtBL,GAAyBF,KACxB,CAACM,EAAQN,EAAsBO,EAAWL,IAE7C,OAAOU,GAAiB,SAACS,EAAOC,GAAR,OACtB,eAAC,WAASC,IAAV,CAAcC,UAAU,SAAeH,QAAvC,UACE,qBAAKG,UAAU,cAAcC,QAASL,IAEtC,qBAAKI,UAAU,gBAAf,SACE,eAAC,IAAD,CAAME,GAAG,IAAID,QAASlB,EAAUoB,KAAK,GAAM,GAA3C,oBACS,+CAIX,8CACEH,UAAU,eACVI,aAAcX,GACTR,EAAWU,MAAQ,KAAO,CAC7BM,QAASlB,EAAUoB,KAAK,GAAOrB,KAJnC,cAOGG,EAAWU,MAAQ,KAClB,+BAAgBhB,EAATG,EAAW,QAAa,UAGhCG,EAAWU,OAAS,KACnB,qCACE,cAAC,IAAD,CAAMO,GAAG,IAAT,SACE,+BACE,cAAC,IAAD,eAAUG,EAAc,WAG5B,cAAC,IAAD,CAAMH,GAAG,SAAT,SACE,+BACE,cAAC,IAAD,eAAgBG,EAAc,8BAWxCA,EAAgB,SAACC,GAAD,MAAW,CAC/BT,MAAO,CACLU,OAAQC,OAAOC,SAASC,WAAaJ,EAAO,UAAY,MCpEtDK,EAAOC,gBAAK,kBAAMC,aAAM,kBAAM,2DAC9BC,EAAQF,gBAAK,kBAAMC,aAAM,kBAAM,yCAsDtBE,UApDH,WACV,MAAwDlC,oBAAS,GAAjE,mBAAOL,EAAP,KAA6BE,EAA7B,KACM+B,EAAWO,cAEXvC,EAAQ,CACZ,CACEwC,SAAU,IACVC,KAAMP,EACNQ,YAAa,OACbC,cAAc,GAEhB,CACEH,SAAU,SACVC,KAAMJ,EACNK,YAAa,QACbC,cAAc,IAalB,OATAC,qBAAU,WACJ7C,IAEF8C,SAASC,gBAAgBC,SAAS,CAAEC,IAAK,EAAGC,SAAU,WAEtDJ,SAASK,KAAKH,SAAS,CAAEC,IAAK,EAAGC,SAAU,cAE5C,CAAClD,IAGF,sBAAKwB,UAAU,MAAf,UACE,cAAC,WAAD,CAAU4B,SAAU,0BACpB,cAAC,EAAD,CAAcnD,QAAOD,uBAAsBE,4BAE3C,cAAC,WAAD,CAAUkD,SAAU,wBAApB,SACE,eAAC,IAAD,CAAQnB,SAAUA,EAAlB,UACGhC,EAAMoD,KAAI,SAACC,EAAMC,GAChB,OACE,cAAC,IAAD,CACEC,OAAK,EACL1B,KAAMwB,EAAKb,SACXgB,OAAQ,cAAGC,MAAH,OAAe,cAACJ,EAAKZ,KAAN,MAClBa,MAIX,cAAC,IAAD,CAAU7B,GAAG","file":"static/js/13.8f235441.chunk.js","sourcesContent":["import { useState, useCallback } from \"react\";\nimport { Home, HelpCircle } from \"react-feather\";\nimport { Link } from \"react-router-dom\";\nimport { useTransition, animated } from \"react-spring\";\nimport { useLockBodyScroll, usePageLeave, useWindowSize } from \"react-use\";\nimport {useTranslation} from 'react-i18next';\n\nfunction Navbar({ pages, showLanguageSwitcher, setShowLanguageSwitcher }) {\n  const {t} = useTranslation();\n  const [expand, setExpand] = useState(false);\n\n  useLockBodyScroll(expand);\n  const windowSize = useWindowSize();\n\n  usePageLeave(() => setExpand(false));\n\n  const navbarTransition = useTransition(true, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n  });\n\n  const handleMouseEnter = useCallback(() => {\n    if (windowSize.width >= 769) {\n      setExpand(true);\n    }\n  }, [windowSize.width]);\n\n  const handleLanguageSwitcher = useCallback(() => {\n    if (expand) setExpand(false);\n    setShowLanguageSwitcher(!showLanguageSwitcher);\n  }, [expand, showLanguageSwitcher, setExpand, setShowLanguageSwitcher]);\n\n  return navbarTransition((style, item) => (\n    <animated.div className=\"Navbar\" {...{ style }}>\n      <div className=\"navbar-left\" onClick={handleLanguageSwitcher}></div>\n\n      <div className=\"navbar-middle\">\n        <Link to=\"/\" onClick={setExpand.bind(this, false)}>\n          Covid19<span>saudia</span>\n        </Link>\n      </div>\n\n      <div\n        className=\"navbar-right\"\n        onMouseEnter={handleMouseEnter}\n        {...(windowSize.width < 769 && {\n          onClick: setExpand.bind(this, !expand),\n        })}\n      >\n        {windowSize.width < 769 && (\n          <span>{expand ? t(\"Close\") : t(\"Menu\")}</span>\n        )}\n\n        {windowSize.width >= 769 && (\n          <>\n            <Link to=\"/\">\n              <span>\n                <Home {...activeNavIcon(\"/\")} />\n              </span>\n            </Link>\n            <Link to=\"/about\">\n              <span>\n                <HelpCircle {...activeNavIcon(\"/about\")} />\n              </span>\n            </Link>\n          </>\n        )}\n      </div>\n    </animated.div>\n  ));\n}\nexport default Navbar;\n\nconst activeNavIcon = (path) => ({\n  style: {\n    stroke: window.location.pathname === path ? \"#4c75f2\" : \"\",\n  },\n});\n","import \"./App.scss\";\nimport { retry } from \"./utils/commonFunctions\";\n\nimport { lazy, useState, Suspense, useEffect } from \"react\";\nimport { Route, Redirect, Switch, useLocation } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\n\nconst Home = lazy(() => retry(() => import(\"./components/Home\")));\nconst About = lazy(() => retry(() => import(\"./components/About\")));\n\nconst App = () => {\n  const [showLanguageSwitcher, setShowLanguageSwitcher] = useState(false);\n  const location = useLocation();\n\n  const pages = [\n    {\n      pageLink: \"/\",\n      view: Home,\n      displayName: \"Home\",\n      showInNavbar: true,\n    },\n    {\n      pageLink: \"/about\",\n      view: About,\n      displayName: \"About\",\n      showInNavbar: true,\n    },\n  ];\n\n  useEffect(() => {\n    if (showLanguageSwitcher) {\n      // For Chrome, Firefox, IE and Opera\n      document.documentElement.scrollTo({ top: 0, behavior: \"smooth\" });\n      // For Safari\n      document.body.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n  }, [showLanguageSwitcher]);\n\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<div />}></Suspense>\n      <Navbar {...{ pages, showLanguageSwitcher, setShowLanguageSwitcher }} />\n\n      <Suspense fallback={<div />}>\n        <Switch location={location}>\n          {pages.map((page, index) => {\n            return (\n              <Route\n                exact\n                path={page.pageLink}\n                render={({ match }) => <page.view />}\n                key={index}\n              />\n            );\n          })}\n          <Redirect to=\"/\" />\n        </Switch>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}
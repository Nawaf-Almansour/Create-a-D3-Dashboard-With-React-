{"version":3,"sources":["components/Tooltip.js","components/ActionsPanel.js","components/Actions.js"],"names":["Tooltip","children","message","hold","childProps","handleClick","useCallback","e","stopPropagation","className","content","dangerouslySetInnerHTML","__html","trim","split","map","text","join","arrow","animation","touch","onClick","Timeline","lazy","retry","ActionsPanel","lastUpdatedDate","newUpdate","isTimelineMode","setIsTimelineMode","showUpdates","date","setDate","dates","setNewUpdate","setShowUpdates","t","useTranslation","trail","useMemo","styles","element","index","push","animationDelay","handleTimelineClick","handleBellClick","style","opacity","transform","pointerEvents","formatDate","size","fallback","Updates","Actions","useState","useLocalStorage","lastViewedLog","setLastViewedLog","updates","useSWR","API_DOMAIN","fetcher","refreshInterval","API_REFRESH_INTERVAL","data","useEffect","undefined","lastTimestamp","slice","reverse","timestamp","maxLastUpdatedDate","formatDateObjSaudia","max","filter","parseSaudiaDate","isEqual","prevProps","currProps","equal","memo"],"mappings":"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","file":"static/js/14.59213c06.chunk.js","sourcesContent":["import Tippy from \"@tippyjs/react\";\nimport { useCallback } from \"react\";\n\nimport \"tippy.js/dist/tippy.css\";\nimport \"tippy.js/animations/shift-away.css\";\n\nfunction Tooltip({ children, message, hold = false, childProps = {} }) {\n  const handleClick = useCallback((e) => e.stopPropagation(), []);\n\n  return (\n    <Tippy\n      className=\"Tooltip\"\n      content={\n        typeof message === \"string\" ? (\n          <p\n            className=\"message\"\n            dangerouslySetInnerHTML={{\n              __html: message\n                .trim()\n                .split(\"\\n\")\n                .map((text) => `<div>${text}</div>`)\n                .join(\"\"),\n            }}\n          ></p>\n        ) : (\n          message\n        )\n      }\n      arrow={false}\n      animation=\"shift-away\"\n      touch={hold ? [\"hold\", 300] : true}\n    >\n      <div onClick={handleClick} {...childProps}>\n        {children}\n      </div>\n    </Tippy>\n  );\n}\n\nexport default Tooltip;\n","import Tooltip from \"./Tooltip\";\n\nimport { formatDate, retry } from \"../utils/commonFunctions\";\n\nimport { BellIcon, BellSlashIcon, HistoryIcon } from \"@primer/octicons-react\";\nimport { useMemo, useCallback, lazy, Suspense } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst Timeline = lazy(() => retry(() => import(\"./Timeline\")));\n\nconst ActionsPanel = ({\n  lastUpdatedDate,\n  newUpdate,\n  isTimelineMode,\n  setIsTimelineMode,\n  showUpdates,\n  date,\n  setDate,\n  dates,\n  setNewUpdate,\n  setShowUpdates,\n}) => {\n  const { t } = useTranslation();\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${500 + index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  const handleTimelineClick = useCallback(() => {\n    setIsTimelineMode(true);\n    if (showUpdates) setShowUpdates(!showUpdates);\n  }, [setIsTimelineMode, setShowUpdates, showUpdates]);\n\n  const handleBellClick = useCallback(() => {\n    if (!showUpdates) setNewUpdate(false);\n    setShowUpdates(!showUpdates);\n  }, [showUpdates, setShowUpdates, setNewUpdate]);\n\n  return (\n    <div className=\"ActionsPanel\">\n      <div\n        className=\"actions\"\n        style={{\n          opacity: isTimelineMode ? 0 : 1,\n          transform: `perspective(600px) rotateX(${\n            isTimelineMode ? 90 : 0\n          }deg)`,\n          pointerEvents: isTimelineMode ? \"none\" : \"\",\n        }}\n      >\n        <h5 className=\"fadeInUp\" style={trail[0]}>{`${formatDate(\n          lastUpdatedDate,\n          \"dd MMM, p\"\n        )} ${t(\"IST\")}`}</h5>\n\n        <div\n          className=\"bell-icon fadeInUp\"\n          style={trail[1]}\n          onClick={handleBellClick}\n        >\n          {!showUpdates ? <BellIcon size={15} /> : <BellSlashIcon size={15} />}\n          {newUpdate && <div className=\"indicator\"></div>}\n        </div>\n\n        <Tooltip message={\"Timeline\"} hold>\n          <div\n            className=\"timeline-icon fadeInUp\"\n            onClick={handleTimelineClick}\n            style={trail[2]}\n          >\n            {<HistoryIcon />}\n          </div>\n        </Tooltip>\n      </div>\n\n      {isTimelineMode && (\n        <Suspense fallback={<div />}>\n          <Timeline\n            {...{ date, setDate, dates, isTimelineMode, setIsTimelineMode }}\n          />\n        </Suspense>\n      )}\n    </div>\n  );\n};\n\nexport default ActionsPanel;\n","import ActionsPanel from \"./ActionsPanel\";\n\nimport { API_DOMAIN, API_REFRESH_INTERVAL } from \"../constants\";\nimport {\n  fetcher,\n  formatDateObjSaudia,\n  parseSaudiaDate,\n  retry,\n} from \"../utils/commonFunctions\";\n\nimport { max } from \"date-fns\";\nimport equal from \"fast-deep-equal\";\nimport { memo, useEffect, useMemo, useState, lazy, Suspense } from \"react\";\nimport { useLocalStorage } from \"react-use\";\nimport useSWR from \"swr\";\n\nconst Updates = lazy(() => retry(() => import(\"./Updates\")));\n\nconst Actions = ({ date, setDate, dates, lastUpdatedDate }) => {\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [newUpdate, setNewUpdate] = useLocalStorage(\"newUpdate\", false);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage(\"lastViewedLog\", 0);\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\n\n  const { data: updates } = useSWR(\n    `${API_DOMAIN}/updatelog/log.json`,\n    fetcher,\n    {\n      refreshInterval: API_REFRESH_INTERVAL,\n    }\n  );\n\n  useEffect(() => {\n    if (updates !== undefined) {\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\n      if (lastTimestamp !== lastViewedLog) {\n        setNewUpdate(true);\n        setLastViewedLog(lastTimestamp);\n      }\n    }\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\n\n  const maxLastUpdatedDate = useMemo(() => {\n    return formatDateObjSaudia(\n      max(\n        [lastViewedLog, lastUpdatedDate]\n          .filter((date) => date)\n          .map((date) => parseSaudiaDate(date))\n      )\n    );\n  }, [lastViewedLog, lastUpdatedDate]);\n\n  return (\n    <>\n      <ActionsPanel\n        {...{\n          lastUpdatedDate: maxLastUpdatedDate,\n          newUpdate,\n          isTimelineMode,\n          setIsTimelineMode,\n          showUpdates,\n          date,\n          setDate,\n          dates,\n          setNewUpdate,\n          setShowUpdates,\n        }}\n      />\n\n      {showUpdates && (\n        <Suspense fallback={<div />}>\n          <Updates {...{ updates }} />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.lastUpdatedDate, prevProps.lastUpdatedDate)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Actions, isEqual);\n"],"sourceRoot":""}
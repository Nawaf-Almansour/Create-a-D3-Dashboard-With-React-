{"version":3,"sources":["components/Level.js"],"names":["PureLevelItem","statistic","total","delta","t","useTranslation","spring","useSpring","config","SPRING_CONFIG_NUMBERS","statisticConfig","STATISTIC_CONFIGS","capitalize","displayName","h4","to","formatNumber","format","size","verticalAlign","h1","LevelItem","memo","Level","data","trail","useMemo","styles","LEVEL_STATISTICS","map","index","push","animationDelay","width","length","className","div","classnames","style","getStatistic","isEqual","prevProps","currProps","equal"],"mappings":"+FAAA,qGAcA,SAASA,EAAT,GAAmD,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,MAC/BC,EAAKC,cAALD,EACDE,EAASC,oBAAU,CACrBL,MAAOA,EACPC,MAAOA,EACPK,OAAQC,MAGNC,EAAkBC,IAAkBV,GAE1C,OACI,qCACI,6BAAKG,EAAEQ,YAAWF,EAAgBG,gBAClC,cAAC,WAASC,GAAV,UACmB,WAAdb,EACGE,EAAQ,EAEJG,EAAOH,MAAMY,IACT,SAACZ,GAAD,kBACSa,YACDb,EAC2B,UAA3BO,EAAgBO,OACVP,EAAgBO,OAChB,OACNhB,OAIZ,cAAC,IAAD,CAAeiB,KAAM,EAAGC,cAAe,IAG3C,SAGR,cAAC,WAASC,GAAV,UACKd,EAAOJ,MAAMa,IAAG,SAACb,GAAD,OACbc,YACId,EAC2B,UAA3BQ,EAAgBO,OACVP,EAAgBO,OAChB,OACNhB,WAQxB,IAAMoB,EAAYC,eAAKtB,GAEvB,SAASuB,EAAT,GAAwB,IAARC,EAAO,EAAPA,KACNC,EAAQC,mBAAQ,WAClB,IAAMC,EAAS,GASf,OAPAC,IAAiBC,KAAI,SAAC5B,EAAW6B,GAK7B,OAJAH,EAAOI,KAAK,CACRC,eAAe,GAAD,OAAK,IAAc,IAARF,EAAX,MACdG,MAAM,QAAD,OAAU,IAAML,IAAiBM,OAAjC,QAEF,QAEJP,IACR,IAEH,OACI,qBAAKQ,UAAU,QAAf,SACKP,IAAiBC,KAAI,SAAC5B,EAAW6B,GAAZ,OAClB,cAAC,WAASM,IAAV,CAEID,UAAWE,IAAW,aAAD,aAAqBpC,GAAa,YACvDqC,MAAOb,EAAMK,GAHjB,SAKI,cAACT,EAAD,CACSpB,YACLC,MAAOqC,YAAaf,EAAM,QAASvB,GACnCE,MAAOoC,YAAaf,EAAM,QAASvB,MAPlC6B,QAezB,IAAMU,EAAU,SAACC,EAAWC,GACxB,QAAKC,IAAMF,EAAUjB,KAAMkB,EAAUlB,OAM1BF,yBAAKC,EAAOiB","file":"static/js/20.7bdca8c7.chunk.js","sourcesContent":["import {\n    LEVEL_STATISTICS,\n    STATISTIC_CONFIGS,\n    SPRING_CONFIG_NUMBERS,\n} from '../constants';\nimport {capitalize, formatNumber, getStatistic} from '../utils/commonFunctions';\n\nimport {HeartFillIcon} from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport {memo, useMemo} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {animated, useSpring} from 'react-spring';\n\nfunction PureLevelItem({statistic, total, delta}) {\n    const {t} = useTranslation();\n    const spring = useSpring({\n        total: total,\n        delta: delta,\n        config: SPRING_CONFIG_NUMBERS,\n    });\n\n    const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n    return (\n        <>\n            <h5>{t(capitalize(statisticConfig.displayName))}</h5>\n            <animated.h4>\n                {statistic !== 'active' ? (\n                    delta > 0 ? (\n                        /* Add space after + because react-spring regex bug */\n                        spring.delta.to(\n                            (delta) =>\n                                `+ ${formatNumber(\n                                    delta,\n                                    statisticConfig.format !== 'short'\n                                        ? statisticConfig.format\n                                        : 'long',\n                                    statistic\n                                )}`\n                        )\n                    ) : (\n                        <HeartFillIcon size={9} verticalAlign={2} />\n                    )\n                ) : (\n                    '\\u00A0'\n                )}\n            </animated.h4>\n            <animated.h1>\n                {spring.total.to((total) =>\n                    formatNumber(\n                        total,\n                        statisticConfig.format !== 'short'\n                            ? statisticConfig.format\n                            : 'long',\n                        statistic\n                    )\n                )}\n            </animated.h1>\n        </>\n    );\n}\n\nconst LevelItem = memo(PureLevelItem);\n\nfunction Level({data}) {\n    const trail = useMemo(() => {\n        const styles = [];\n\n        LEVEL_STATISTICS.map((statistic, index) => {\n            styles.push({\n                animationDelay: `${750 + index * 250}ms`,\n                width: `calc(${100 / LEVEL_STATISTICS.length}%)`,\n            });\n            return null;\n        });\n        return styles;\n    }, []);\n\n    return (\n        <div className=\"Level\">\n            {LEVEL_STATISTICS.map((statistic, index) => (\n                <animated.div\n                    key={index}\n                    className={classnames('level-item', `is-${statistic}`, 'fadeInUp')}\n                    style={trail[index]}\n                >\n                    <LevelItem\n                        {...{statistic}}\n                        total={getStatistic(data, 'total', statistic)}\n                        delta={getStatistic(data, 'delta', statistic)}\n                    />\n                </animated.div>\n            ))}\n        </div>\n    );\n}\n\nconst isEqual = (prevProps, currProps) => {\n    if (!equal(prevProps.data, currProps.data)) {\n        return false;\n    }\n    return true;\n};\n\nexport default memo(Level, isEqual);\n"],"sourceRoot":""}
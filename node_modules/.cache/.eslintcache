[{"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/index.js":"1","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/utils/commonFunctions.js":"2","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/App.js":"3","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/serviceWorker.js":"4","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/i18n/index.js":"5","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/constants.js":"6","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Home.js":"7","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/About.js":"8","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Navbar.js":"9","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Minigraphs.js":"10","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/MapSwitcher.js":"11","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Level.js":"12","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Actions.js":"13","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/StateHeader.js":"14","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/MapExplorer.js":"15","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/hooks/useIsVisible.js":"16","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/hooks/useStickySWR.js":"17","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Updates.js":"18","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/StateDropdown.js":"19","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/MapVisualizer.js":"20","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Tooltip.js":"21","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/StatisticDropdown.js":"22","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/snippets/Icons.js":"23","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/MapLegend.js":"24","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/loaders/MapVisualizer.js":"25","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/ActionsPanel.js":"26","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Timeline.js":"27","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Calendar.js":"28"},{"size":1196,"mtime":1630151593469,"results":"29","hashOfConfig":"30"},{"size":7625,"mtime":1630214966941,"results":"31","hashOfConfig":"30"},{"size":1655,"mtime":1630159200654,"results":"32","hashOfConfig":"30"},{"size":5167,"mtime":1630214158592,"results":"33","hashOfConfig":"30"},{"size":842,"mtime":1630151051929,"results":"34","hashOfConfig":"30"},{"size":10960,"mtime":1630225005288,"results":"35","hashOfConfig":"30"},{"size":7832,"mtime":1630225560309,"results":"36","hashOfConfig":"30"},{"size":0,"mtime":1630159193092,"results":"37","hashOfConfig":"30"},{"size":2235,"mtime":1630229489196,"results":"38","hashOfConfig":"30"},{"size":6064,"mtime":1630216861040,"results":"39","hashOfConfig":"30"},{"size":2560,"mtime":1630159898104,"results":"40","hashOfConfig":"30"},{"size":3301,"mtime":1630159933886,"results":"41","hashOfConfig":"30"},{"size":2386,"mtime":1630170102735,"results":"42","hashOfConfig":"30"},{"size":1881,"mtime":1630163512945,"results":"43","hashOfConfig":"30"},{"size":13688,"mtime":1630217273001,"results":"44","hashOfConfig":"30"},{"size":673,"mtime":1630164179694,"results":"45","hashOfConfig":"30"},{"size":623,"mtime":1630164173980,"results":"46","hashOfConfig":"30"},{"size":2561,"mtime":1630169977934,"results":"47","hashOfConfig":"30"},{"size":2374,"mtime":1630163570336,"results":"48","hashOfConfig":"30"},{"size":21513,"mtime":1630223335801,"results":"49","hashOfConfig":"30"},{"size":951,"mtime":1630163878807,"results":"50","hashOfConfig":"30"},{"size":4187,"mtime":1630163840459,"results":"51","hashOfConfig":"30"},{"size":443,"mtime":1630163795538,"results":"52","hashOfConfig":"30"},{"size":13304,"mtime":1630216861051,"results":"53","hashOfConfig":"30"},{"size":1054,"mtime":1630163727158,"results":"54","hashOfConfig":"30"},{"size":2437,"mtime":1630169797679,"results":"55","hashOfConfig":"30"},{"size":8070,"mtime":1630169881662,"results":"56","hashOfConfig":"30"},{"size":3045,"mtime":1630229295687,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16j50c6",{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/index.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/utils/commonFunctions.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/App.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/serviceWorker.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/i18n/index.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/constants.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Home.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/About.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Navbar.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Minigraphs.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/MapSwitcher.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Level.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Actions.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/StateHeader.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/MapExplorer.js",["116"],"import MapVisualizerLoader from './loaders/MapVisualizer';\nimport {Delta7Icon, PerLakhIcon} from './snippets/Icons';\nimport StatisticDropdown from './StatisticDropdown';\nimport Tooltip from './Tooltip';\n\nimport {\n  MAP_META,\n  MAP_TYPES,\n  MAP_VIEWS,\n  MAP_VIZS,\n  MAP_STATISTICS,\n  SPRING_CONFIG_NUMBERS,\n  STATE_NAMES,\n  STATISTIC_CONFIGS,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {formatNumber, getStatistic, retry} from '../utils/commonFunctions';\n\nimport {\n  ArrowLeftIcon,\n  DotFillIcon,\n  PinIcon,\n  OrganizationIcon,\n} from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  Suspense,\n  lazy,\n} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {animated, useSpring} from 'react-spring';\nimport {useSwipeable} from 'react-swipeable';\nimport {useSessionStorage, useWindowSize} from 'react-use';\n\nconst MapVisualizer = lazy(() => retry(() => import('./MapVisualizer')));\n\nfunction MapExplorer({\n  stateCode: mapCode = 'TT',\n  data,\n  mapView = MAP_VIEWS.DISTRICTS,\n  setMapView,\n  mapStatistic,\n  setMapStatistic,\n  regionHighlighted,\n  setRegionHighlighted,\n  noRegionHighlightedDistrictData,\n  anchor,\n  setAnchor,\n  expandTable = false,\n  lastDataDate,\n  hideDistrictData = false,\n  hideDistrictTestData = true,\n  hideVaccinated = false,\n  noDistrictData = false,\n}) {\n  const {t} = useTranslation();\n  const mapExplorerRef = useRef();\n  const {width} = useWindowSize();\n\n  const [isPerLakh, setIsPerLakh] = useSessionStorage('isPerLakhMap', false);\n  const [delta7Mode, setDelta7Mode] = useSessionStorage('delta7ModeMap', false);\n\n  const mapMeta = MAP_META[mapCode];\n  const mapData =\n    mapMeta.mapType === MAP_TYPES.COUNTRY ? data : {[mapCode]: data[mapCode]};\n\n  const statisticConfig = STATISTIC_CONFIGS[mapStatistic];\n\n  const isDistrictView =\n    mapView === MAP_VIEWS.DISTRICTS &&\n    (mapMeta.mapType === MAP_TYPES.STATE ||\n      (!hideDistrictData &&\n        !(hideDistrictTestData && statisticConfig?.category === 'tested')));\n\n  const hoveredRegion = useMemo(() => {\n    const hoveredData =\n      (regionHighlighted.districtName\n        ? data[regionHighlighted.stateCode]?.districts?.[\n            regionHighlighted.districtName\n          ]\n        : data[regionHighlighted.stateCode]) || {};\n\n    return produce(hoveredData, (draft) => {\n      draft.name =\n        regionHighlighted.districtName ||\n        STATE_NAMES[regionHighlighted.stateCode];\n    });\n  }, [data, regionHighlighted.stateCode, regionHighlighted.districtName]);\n\n  const handlePerLakhClick = useCallback(() => {\n    const statisticConfig = STATISTIC_CONFIGS[mapStatistic];\n    if (statisticConfig?.nonLinear || mapStatistic === 'population') {\n      return;\n    }\n    setIsPerLakh((isPerLakh) => !isPerLakh);\n  }, [mapStatistic, setIsPerLakh]);\n\n  const handleDistrictClick = useCallback(() => {\n    const newMapView =\n      mapView === MAP_VIEWS.DISTRICTS ? MAP_VIEWS.STATES : MAP_VIEWS.DISTRICTS;\n    if (newMapView === MAP_VIEWS.STATES) {\n      setRegionHighlighted({\n        stateCode: regionHighlighted.stateCode,\n        districtName: null,\n      });\n    }\n    setMapView(newMapView);\n  }, [mapView, regionHighlighted.stateCode, setMapView, setRegionHighlighted]);\n\n  const history = useHistory();\n  const panelRef = useRef();\n\n  useEffect(() => {\n    if (history.location.hash === '#MapExplorer') {\n      panelRef.current.scrollIntoView();\n    }\n  }, [history]);\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0, 0, 0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${index * 250}ms`,\n      });\n      return null;\n    });\n\n    return styles;\n  }, []);\n\n  const getMapStatistic = useCallback(\n    (data) => {\n      const statisticConfig = STATISTIC_CONFIGS[mapStatistic];\n\n      const type =\n        (statisticConfig?.showDelta && delta7Mode) ||\n        statisticConfig?.onlyDelta7\n          ? 'delta7'\n          : 'total';\n\n      return getStatistic(data, type, mapStatistic, {\n        expiredDate: lastDataDate,\n        normalizedByPopulationPer:\n          isPerLakh && mapStatistic != 'population' ? 'lakh' : null,\n        canBeNaN: true,\n      });\n    },\n    [mapStatistic, isPerLakh, lastDataDate, delta7Mode]\n  );\n\n  let currentVal = getMapStatistic(hoveredRegion);\n  if (isNaN(currentVal)) {\n    currentVal = '-';\n  }\n\n  const spring = useSpring({\n    total: currentVal,\n    config: {tension: 250, ...SPRING_CONFIG_NUMBERS},\n  });\n\n  const mapStatistics = useMemo(\n    () =>\n      MAP_STATISTICS.filter(\n        (statistic) =>\n          !(STATISTIC_CONFIGS[statistic]?.category === 'vaccinated') ||\n          !hideVaccinated\n      ),\n    [hideVaccinated]\n  );\n\n  const handleStatisticChange = useCallback(\n    (direction) => {\n      const currentIndex = mapStatistics.indexOf(mapStatistic);\n      const toIndex =\n        (mapStatistics.length + currentIndex + direction) %\n        mapStatistics.length;\n      setMapStatistic(mapStatistics[toIndex]);\n    },\n    [mapStatistic, mapStatistics, setMapStatistic]\n  );\n\n  const swipeHandlers = useSwipeable({\n    onSwipedLeft: handleStatisticChange.bind(this, 1),\n    onSwipedRight: handleStatisticChange.bind(this, -1),\n  });\n\n  const mapViz = statisticConfig?.mapConfig?.spike\n    ? MAP_VIZS.SPIKE\n    : isPerLakh ||\n      statisticConfig?.mapConfig?.colorScale ||\n      statisticConfig?.nonLinear\n    ? MAP_VIZS.CHOROPLETH\n    : MAP_VIZS.BUBBLE;\n\n  const handleDeltaClick = useCallback(() => {\n    if (statisticConfig?.showDelta) {\n      setDelta7Mode((delta7Mode) => !delta7Mode);\n    }\n  }, [statisticConfig, setDelta7Mode]);\n\n  const stickied = anchor === 'mapexplorer' || (expandTable && width >= 769);\n\n  const transformStatistic = useCallback(\n    (val) =>\n      statisticConfig?.mapConfig?.transformFn\n        ? statisticConfig.mapConfig.transformFn(val)\n        : val,\n    [statisticConfig]\n  );\n\n  const zoneColor = statisticConfig?.mapConfig?.colorScale\n    ? statisticConfig.mapConfig.colorScale(transformStatistic(currentVal))\n    : '';\n\n  return (\n    <div\n      className={classnames(\n        'MapExplorer',\n        {stickied},\n        {\n          hidden:\n            anchor && anchor !== 'mapexplorer' && (!expandTable || width < 769),\n        }\n      )}\n    >\n      <div\n        className={classnames('anchor', 'fadeInUp', {\n          stickied,\n        })}\n        style={{\n          display: width < 769 || (width >= 769 && expandTable) ? 'none' : '',\n        }}\n        onClick={\n          setAnchor &&\n          setAnchor.bind(this, anchor === 'mapexplorer' ? null : 'mapexplorer')\n        }\n      >\n        <PinIcon />\n      </div>\n      <div className=\"panel\" ref={panelRef}>\n        <div className=\"panel-left fadeInUp\" style={trail[0]}>\n          <h2\n            className={classnames(mapStatistic)}\n            style={{color: zoneColor || statisticConfig?.color}}\n          >\n            {t(hoveredRegion.name)}\n            {hoveredRegion.name === UNKNOWN_DISTRICT_KEY &&\n              ` [${t(STATE_NAMES[regionHighlighted.stateCode])}]`}\n          </h2>\n\n          {regionHighlighted.stateCode && (\n            <h1\n              className={classnames('district', mapStatistic)}\n              style={{color: zoneColor || statisticConfig?.color}}\n            >\n              <animated.div>\n                {spring.total.to((total) =>\n                  !noRegionHighlightedDistrictData ||\n                  !statisticConfig?.hasPrimary\n                    ? formatNumber(total, statisticConfig.format, mapStatistic)\n                    : '-'\n                )}\n              </animated.div>\n              <StatisticDropdown\n                currentStatistic={mapStatistic}\n                statistics={mapStatistics}\n                mapType={mapMeta.mapType}\n                {...{\n                  isPerLakh,\n                  delta7Mode,\n                  mapStatistic,\n                  setMapStatistic,\n                  hideDistrictTestData,\n                  hideVaccinated,\n                  zoneColor,\n                }}\n              />\n            </h1>\n          )}\n        </div>\n\n        <div className={classnames('panel-right', `is-${mapStatistic}`)}>\n          <div className=\"switch-type\">\n            <Tooltip message={'Last 7 day values'} hold>\n              <div\n                className={classnames('toggle', 'fadeInUp', {\n                  'is-highlighted':\n                    (delta7Mode && statisticConfig?.showDelta) ||\n                    statisticConfig?.onlyDelta7,\n                  disabled: !statisticConfig?.showDelta,\n                })}\n                onClick={handleDeltaClick}\n                style={trail[1]}\n              >\n                <Delta7Icon />\n              </div>\n            </Tooltip>\n\n            <Tooltip message={'Per lakh people'} hold>\n              <div\n                className={classnames('toggle', 'fadeInUp', {\n                  'is-highlighted':\n                    !statisticConfig?.nonLinear &&\n                    mapViz === MAP_VIZS.CHOROPLETH,\n                  disabled:\n                    statisticConfig?.nonLinear || mapStatistic === 'population',\n                })}\n                onClick={handlePerLakhClick}\n                style={trail[2]}\n              >\n                <PerLakhIcon />\n              </div>\n            </Tooltip>\n\n            {mapMeta.mapType === MAP_TYPES.COUNTRY && (\n              <Tooltip message={'Toggle between states/districts'} hold>\n                <div\n                  className={classnames('toggle', 'boundary fadeInUp', {\n                    'is-highlighted': isDistrictView,\n                    disabled:\n                      hideDistrictData ||\n                      (statisticConfig?.category === 'tested' &&\n                        hideDistrictTestData),\n                  })}\n                  onClick={handleDistrictClick}\n                  style={trail[3]}\n                >\n                  <OrganizationIcon />\n                </div>\n              </Tooltip>\n            )}\n\n            {mapMeta.mapType === MAP_TYPES.STATE && (\n              <>\n                <div className=\"divider\" />\n                <div\n                  className=\"toggle back fadeInUp\"\n                  onClick={() => {\n                    history.push('/#MapExplorer');\n                  }}\n                  style={trail[4]}\n                >\n                  <ArrowLeftIcon />\n                </div>\n              </>\n            )}\n          </div>\n\n          <div className=\"switch-statistic fadeInUp\" style={trail[5]}>\n            {mapStatistics.map((statistic) => (\n              <div\n                key={statistic}\n                className={classnames(\n                  'toggle',\n                  'statistic-option',\n                  `is-${statistic}`,\n                  {\n                    'is-highlighted': mapStatistic === statistic,\n                  }\n                )}\n                onClick={setMapStatistic.bind(this, statistic)}\n              >\n                <DotFillIcon />\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div\n        ref={mapExplorerRef}\n        className=\"fadeInUp\"\n        style={trail[3]}\n        {...swipeHandlers}\n      >\n        {mapStatistic && (\n          <Suspense\n            fallback={\n              <MapVisualizerLoader\n                className=\"map-loader\"\n                {...{\n                  width: mapExplorerRef.current?.clientWidth,\n                  statistic: mapStatistic,\n                }}\n              />\n            }\n          >\n            <MapVisualizer\n              data={mapData}\n              statistic={mapStatistic}\n              {...{\n                mapCode,\n                isDistrictView,\n                mapViz,\n                regionHighlighted,\n                setRegionHighlighted,\n                getMapStatistic,\n                transformStatistic,\n                noDistrictData,\n              }}\n            ></MapVisualizer>\n          </Suspense>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.stateCode, currProps.stateCode)) {\n    return false;\n  } else if (!equal(prevProps.regionHighlighted, currProps.regionHighlighted)) {\n    return false;\n  } else if (!equal(prevProps.mapView, currProps.mapView)) {\n    return false;\n  } else if (!equal(prevProps.mapStatistic, currProps.mapStatistic)) {\n    return false;\n  } else if (!equal(prevProps.anchor, currProps.anchor)) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  } else if (!equal(prevProps.hideDistrictData, currProps.hideDistrictData)) {\n    return false;\n  } else if (\n    !equal(prevProps.hideDistrictTestData, currProps.hideDistrictTestData)\n  ) {\n    return false;\n  } else if (!equal(prevProps.hideVaccinated, currProps.hideVaccinated)) {\n    return false;\n  } else if (!equal(prevProps.lastDataDate, currProps.lastDataDate)) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.data?.TT?.meta?.['last_updated'],\n      currProps.data?.TT?.meta?.['last_updated']\n    )\n  ) {\n    return false;\n  } else if (!equal(prevProps.data?.TT?.total, currProps.data?.TT?.total)) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.noRegionHighlightedDistrictData,\n      currProps.noRegionHighlightedDistrictData\n    )\n  ) {\n    return false;\n  } else if (!equal(prevProps.noDistrictData, currProps.noDistrictData)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(MapExplorer, isEqual);\n","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/hooks/useIsVisible.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/hooks/useStickySWR.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Updates.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/StateDropdown.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/MapVisualizer.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Tooltip.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/StatisticDropdown.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/snippets/Icons.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/MapLegend.js",["117"],"import {\n  D3_TRANSITION_DURATION,\n  MAP_DIMENSIONS,\n  MAP_LEGEND_HEIGHT,\n  MAP_VIZS,\n  STATISTIC_CONFIGS,\n} from '../constants';\nimport {formatNumber, spike} from '../utils/commonFunctions';\n\nimport {range, quantile} from 'd3-array';\nimport {axisRight, axisBottom} from 'd3-axis';\nimport {format} from 'd3-format';\nimport {interpolate, interpolateRound, quantize} from 'd3-interpolate';\nimport {scaleLinear, scaleOrdinal, scaleBand} from 'd3-scale';\nimport {select} from 'd3-selection';\nimport {transition} from 'd3-transition';\nimport {useEffect, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useMeasure} from 'react-use';\n\nfunction MapLegend({data, statistic, mapViz, mapScale}) {\n  const {t} = useTranslation();\n  const svgLegendRef = useRef(null);\n  const svgLegendChoroRef = useRef(null);\n  const [wrapperRef, {width}] = useMeasure();\n\n  useEffect(() => {\n    const t = transition().duration(D3_TRANSITION_DURATION);\n\n    if (mapViz !== MAP_VIZS.CHOROPLETH) {\n      const svg = select(svgLegendChoroRef.current);\n      svg\n        .select('.ramp')\n        .transition(t)\n        .attr('opacity', 0)\n        .attr('display', 'none')\n        .attr('xlink:href', null);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .transition(t)\n        .attr('opacity', 0)\n        .remove();\n      svg.selectAll('.axis > *:not(.axistext)').remove();\n      svg.select('.axistext').text('');\n    }\n\n    if (mapViz !== MAP_VIZS.BUBBLE) {\n      const svg = select(svgLegendRef.current);\n      svg\n        .select('.circles')\n        .selectAll('circle')\n        .transition(t)\n        .attr('r', 0)\n        .attr('cy', 0)\n        .remove();\n      svg.selectAll('.circle-axis > *').remove();\n    }\n\n    if (mapViz !== MAP_VIZS.SPIKES) {\n      const svg = select(svgLegendRef.current);\n      svg\n        .select('.spikes')\n        .call((g) =>\n          g.selectAll('path').transition(t).attr('d', spike(0)).remove()\n        )\n        .call((g) => g.selectAll('text').remove())\n        .transition(t)\n        .selectAll('g')\n        .remove();\n      svg.selectAll('.spike-axis > *').remove();\n    }\n  }, [mapViz]);\n\n  useEffect(() => {\n    if (!width) return;\n\n    const statisticConfig = STATISTIC_CONFIGS[statistic];\n    const zoom = width / MAP_DIMENSIONS[0];\n\n    if (mapViz === MAP_VIZS.BUBBLE) {\n      const svg = select(svgLegendRef.current);\n\n      const [, domainMax] = mapScale.domain();\n\n      const legend = svg\n        .select('.circles')\n        .attr('transform', `translate(48,40)`)\n        .attr('text-anchor', 'middle');\n\n      const legendRadius = [0.1, 0.4, 1].map((d) => d * domainMax);\n\n      legend\n        .selectAll('circle')\n        .data(legendRadius)\n        .join('circle')\n        .attr('fill', 'none')\n        .attr('stroke', statisticConfig.color + '70')\n        .transition(t)\n        .attr('cy', (d) => -mapScale(d))\n        .attr('r', (d) => mapScale(d));\n\n      const yScale = mapScale.copy().range([0, -2 * mapScale(domainMax)]);\n\n      svg\n        .select('.circle-axis')\n        .attr('transform', `translate(48,50)`)\n        .transition(t)\n        .call(\n          axisRight(yScale)\n            .tickSize(0)\n            .tickPadding(0)\n            .tickValues(legendRadius)\n            .tickFormat((num) =>\n              formatNumber(\n                num,\n                statisticConfig.format === 'long'\n                  ? 'short'\n                  : statisticConfig.format\n              )\n            )\n        )\n        .selectAll('.tick text')\n        .style('text-anchor', 'middle')\n        .attr('font-size', 10 / zoom);\n\n      svg.select('.circle-axis').call((g) => g.select('.domain').remove());\n    } else if (mapViz === MAP_VIZS.SPIKE) {\n      const svg = select(svgLegendRef.current);\n      const ticks = mapScale.ticks(3).slice(1).reverse();\n\n      const gap = 28 / zoom;\n\n      svg\n        .select('.spikes')\n        .attr('transform', `translate(32,24)`)\n        .selectAll('g')\n        .data(ticks)\n        .join((enter) =>\n          enter.append('g').call((g) =>\n            g\n              .append('path')\n              .attr('fill-opacity', 0.3)\n              .attr('d', (d) => spike(0))\n          )\n        )\n        .attr('transform', (d, i) => `translate(${i * gap},0)`)\n        .call((g) =>\n          g\n            .select('path')\n            .transition(t)\n            .attr('d', (d) => spike(mapScale(d)))\n            .attr('fill', statisticConfig.color + '70')\n            .attr('stroke', statisticConfig.color + '70')\n        );\n\n      const xScale = mapScale.copy().range([gap * ticks.length, 0]);\n      svg\n        .select('.spike-axis')\n        .attr('transform', `translate(32,32)`)\n        .transition(t)\n        .call(\n          axisBottom(xScale)\n            .tickSize(0)\n            .tickPadding(0)\n            .tickValues(ticks)\n            .tickFormat((num) =>\n              formatNumber(\n                num,\n                statisticConfig.format === 'long'\n                  ? 'short'\n                  : statisticConfig.format\n              )\n            )\n        )\n        .selectAll('.tick text')\n        .style('text-anchor', 'middle')\n        .attr('font-size', 10 / zoom);\n\n      svg.select('.spike-axis').call((g) => g.select('.domain').remove());\n    } else {\n      const svg = select(svgLegendChoroRef.current);\n      svg.call(() =>\n        legend({\n          svg: svg,\n          color: mapScale,\n          width: width,\n          height: MAP_LEGEND_HEIGHT,\n          ticks: 5,\n          tickFormat: function (d, i, n) {\n            if (statisticConfig?.mapConfig?.colorScale) {\n              return d;\n            } else if (mapViz === MAP_VIZS.CHOROPLETH && !Number.isInteger(d)) {\n              return '';\n            } else if (i === n.length - 1) {\n              return formatNumber(d, statisticConfig.format) + '+';\n            } else {\n              return formatNumber(d, statisticConfig.format);\n            }\n          },\n          marginLeft: 2,\n          marginRight: 0,\n        })\n      );\n      svg.attr('class', statisticConfig?.mapConfig?.colorScale ? 'zone' : '');\n    }\n  }, [t, width, statistic, mapScale, mapViz]);\n\n  return (\n    <div\n      className=\"svg-parent maplegend\"\n      ref={wrapperRef}\n      style={{height: 2 * MAP_LEGEND_HEIGHT}}\n    >\n      <svg\n        id=\"legend\"\n        preserveAspectRatio=\"xMinYMid meet\"\n        ref={svgLegendRef}\n        viewBox={`0 0 ${MAP_DIMENSIONS[0]} ${MAP_LEGEND_HEIGHT}`}\n      >\n        <g className=\"circles\"></g>\n        <g className=\"spikes\"></g>\n        <g className=\"circle-axis\"></g>\n        <g className=\"spike-axis\"></g>\n        <g className=\"axis\">\n          <text className=\"axistext\" />\n        </g>\n      </svg>\n      <svg\n        id=\"legend-choro\"\n        preserveAspectRatio=\"xMinYMid meet\"\n        ref={svgLegendChoroRef}\n      >\n        <image className=\"ramp\" preserveAspectRatio=\"none\" />\n        <g className=\"bars\"></g>\n        <g className=\"axis\">\n          <text className=\"axistext\" />\n        </g>\n      </svg>\n      <canvas\n        className=\"color-scale\"\n        style={{position: 'absolute', height: 0}}\n      />\n    </div>\n  );\n}\n\nexport default MapLegend;\n\nfunction legend({\n  svg,\n  color,\n  title,\n  tickSize = 6,\n  width = 320,\n  height = 44 + tickSize,\n  marginTop = 18,\n  marginRight = 0,\n  marginBottom = 16 + tickSize,\n  marginLeft = 0,\n  ticks = width / 64,\n  tickFormat,\n  tickValues,\n  ordinalWeights,\n} = {}) {\n  const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n  let tickAdjust = (g) => {\n    const ticks = g.selectAll('.tick line');\n    ticks.attr('y1', marginTop + marginBottom - height);\n    // select(ticks.nodes()[ticks.size() - 1]).remove();\n  };\n  let x;\n\n  // Continuous\n  if (color.interpolate) {\n    const n = Math.min(color.domain().length, color.range().length);\n\n    x = color\n      .copy()\n      .rangeRound(quantize(interpolate(marginLeft, width - marginRight), n));\n\n    svg\n      .select('.ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr(\n        'xlink:href',\n        ramp(color.copy().domain(quantize(interpolate(0, 1), n))).toDataURL()\n      );\n  }\n\n  // Sequential\n  else if (color.interpolator) {\n    svg\n      .select('.bars')\n      .selectAll('rect')\n      .transition(t)\n      .attr('opacity', 0)\n      .remove();\n\n    x = Object.assign(\n      color\n        .copy()\n        .interpolator(interpolateRound(marginLeft, width - marginRight)),\n      {\n        range() {\n          return [marginLeft, width - marginRight];\n        },\n      }\n    );\n\n    svg\n      .select('.ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('xlink:href', ramp(color.interpolator()).toDataURL())\n      .attr('display', 'visible')\n      .transition(t)\n      .attr('opacity', 1);\n\n    // scaleSequentialQuantile doesn’t implement ticks or tickFormat.\n    if (!x.ticks) {\n      if (tickValues === undefined) {\n        const n = Math.round(ticks + 1);\n        tickValues = range(n).map((i) => quantile(color.domain(), i / (n - 1)));\n      }\n      if (typeof tickFormat !== 'function') {\n        tickFormat = format(tickFormat === undefined ? ',f' : tickFormat);\n      }\n    }\n  }\n\n  // Threshold\n  else if (color.invertExtent) {\n    const thresholds = color.thresholds\n      ? color.thresholds() // scaleQuantize\n      : color.quantiles\n      ? color.quantiles() // scaleQuantile\n      : color.domain(); // scaleThreshold\n\n    const thresholdFormat =\n      tickFormat === undefined\n        ? (d) => d\n        : typeof tickFormat === 'string'\n        ? format(tickFormat)\n        : tickFormat;\n\n    x = scaleLinear()\n      .domain([-1, color.range().length - 1])\n      .rangeRound([marginLeft, width - marginRight]);\n\n    svg\n      .append('g')\n      .selectAll('rect')\n      .data(color.range())\n      .join('rect')\n      .attr('x', (d, i) => x(i - 1))\n      .attr('y', marginTop)\n      .attr('width', (d, i) => x(i) - x(i - 1))\n      .attr('height', height - marginTop - marginBottom)\n      .attr('fill', (d) => d);\n\n    tickValues = range(-1, thresholds.length);\n    tickFormat = (i) => {\n      if (i === -1) return thresholdFormat(1);\n      else if (i === thresholds.length - 1) return;\n      else if (i === thresholds.length - 2)\n        return thresholdFormat(thresholds[i] + '+', i);\n      return thresholdFormat(thresholds[i], i);\n    };\n  }\n\n  // Ordinal\n  else {\n    svg\n      .select('.ramp')\n      .transition(t)\n      .attr('opacity', 0)\n      .attr('xlink:href', null);\n    if (!ordinalWeights) {\n      x = scaleBand()\n        .domain(color.domain().filter((d) => d))\n        .rangeRound([marginLeft, width - marginRight]);\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .data(color.domain().filter((d) => d))\n        .join('rect')\n        .attr('x', x)\n        .attr('y', marginTop)\n        .attr('width', Math.max(0, x.bandwidth() - 1))\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color);\n    } else {\n      const widthScale = scaleLinear()\n        .domain([0, ordinalWeights.reduce((a, b) => a + b)])\n        .rangeRound([0, width - marginLeft - marginRight]);\n\n      const xPos = ordinalWeights.map((w, i) =>\n        ordinalWeights\n          .slice(0, i)\n          .reduce((acc, w) => acc + widthScale(w), marginLeft)\n      );\n\n      x = scaleOrdinal().domain(color.domain()).range(xPos);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .data(color.domain())\n        .join((enter) =>\n          enter\n            .append('rect')\n            .attr('x', x)\n            .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        )\n        .attr('y', marginTop)\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color)\n        .transition(t)\n        .attr('x', x)\n        .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        .attr('opacity', 1);\n    }\n\n    tickAdjust = () => {};\n  }\n\n  svg\n    .select('.axis')\n    .attr('transform', `translate(0,${height - marginBottom})`)\n    .transition(t)\n    .attr('class', 'axis')\n    .call(\n      axisBottom(x)\n        .ticks(ticks, typeof tickFormat === 'string' ? tickFormat : undefined)\n        .tickFormat(typeof tickFormat === 'function' ? tickFormat : undefined)\n        .tickSize(tickSize)\n        .tickValues(tickValues)\n    )\n    .on('start', () => {\n      svg.call(tickAdjust).call((svg) => svg.select('.domain').remove());\n    })\n    .call((g) =>\n      g\n        .select('.axistext')\n        .attr('class', 'axistext')\n        .attr('x', marginLeft)\n        .attr('y', marginTop + marginBottom - height - 6)\n        .attr('fill', 'currentColor')\n        .attr('text-anchor', 'start')\n        .attr('font-weight', 'bold')\n        .text(title)\n    );\n\n  return svg.node();\n}\n\nfunction ramp(color, n = 256) {\n  const canvas = select('.color-scale').node();\n  const context = ((canvas.width = n), (canvas.height = 1), canvas).getContext(\n    '2d'\n  );\n  for (let i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(i, 0, 1, 1);\n  }\n  return canvas;\n}\n","/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/loaders/MapVisualizer.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/ActionsPanel.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Timeline.js",[],"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Calendar.js",[],{"ruleId":"118","severity":1,"message":"119","line":153,"column":37,"nodeType":"120","messageId":"121","endLine":153,"endColumn":39},{"ruleId":"122","severity":1,"message":"123","line":467,"column":38,"nodeType":"124","messageId":"125","endLine":467,"endColumn":39},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression"]
{"ast":null,"code":"var _jsxFileName = \"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/d3ia/src/components/Actions.js\",\n    _s = $RefreshSig$();\n\nimport ActionsPanel from \"./ActionsPanel\";\nimport { API_DOMAIN, API_REFRESH_INTERVAL } from \"../constants\";\nimport { fetcher, formatDateObjSaudia, parseSaudiaDate, retry } from \"../utils/commonFunctions\";\nimport { max } from \"date-fns\";\nimport equal from \"fast-deep-equal\";\nimport { memo, useEffect, useMemo, useState, lazy, Suspense } from \"react\";\nimport { useLocalStorage } from \"react-use\";\nimport useSWR from \"swr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Updates = /*#__PURE__*/lazy(_c = () => retry(() => import(\"./Updates\")));\n_c2 = Updates;\n\nconst Actions = ({\n  date,\n  setDate,\n  dates,\n  lastUpdatedDate\n}) => {\n  _s();\n\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [newUpdate, setNewUpdate] = useLocalStorage(\"newUpdate\", false);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage(\"lastViewedLog\", 0);\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\n  const {\n    data: updates\n  } = useSWR(`${API_DOMAIN}/updatelog/log.json`, fetcher, {\n    refreshInterval: API_REFRESH_INTERVAL\n  });\n  useEffect(() => {\n    if (updates !== undefined) {\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\n\n      if (lastTimestamp !== lastViewedLog) {\n        setNewUpdate(true);\n        setLastViewedLog(lastTimestamp);\n      }\n    }\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\n  const maxLastUpdatedDate = useMemo(() => {\n    return formatDateObjSaudia(max([lastViewedLog, lastUpdatedDate].filter(date => date).map(date => parseSaudiaDate(date))));\n  }, [lastViewedLog, lastUpdatedDate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ActionsPanel, {\n      lastUpdatedDate: maxLastUpdatedDate,\n      newUpdate,\n      isTimelineMode,\n      setIsTimelineMode,\n      showUpdates,\n      date,\n      setDate,\n      dates,\n      setNewUpdate,\n      setShowUpdates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), showUpdates && /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 29\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Updates, {\n        updates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Actions, \"siypvL+5OnhxSQ/b4H+Oy3Kcv8U=\", false, function () {\n  return [useLocalStorage, useLocalStorage, useSWR];\n});\n\n_c3 = Actions;\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.lastUpdatedDate, prevProps.lastUpdatedDate)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default _c4 = /*#__PURE__*/memo(Actions, isEqual);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Updates$lazy\");\n$RefreshReg$(_c2, \"Updates\");\n$RefreshReg$(_c3, \"Actions\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"sources":["/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/d3ia/src/components/Actions.js"],"names":["ActionsPanel","API_DOMAIN","API_REFRESH_INTERVAL","fetcher","formatDateObjSaudia","parseSaudiaDate","retry","max","equal","memo","useEffect","useMemo","useState","lazy","Suspense","useLocalStorage","useSWR","Updates","Actions","date","setDate","dates","lastUpdatedDate","showUpdates","setShowUpdates","newUpdate","setNewUpdate","lastViewedLog","setLastViewedLog","isTimelineMode","setIsTimelineMode","data","updates","refreshInterval","undefined","lastTimestamp","slice","reverse","timestamp","maxLastUpdatedDate","filter","map","isEqual","prevProps","currProps"],"mappings":"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","sourcesContent":["import ActionsPanel from \"./ActionsPanel\";\n\nimport { API_DOMAIN, API_REFRESH_INTERVAL } from \"../constants\";\nimport {\n  fetcher,\n  formatDateObjSaudia,\n  parseSaudiaDate,\n  retry,\n} from \"../utils/commonFunctions\";\n\nimport { max } from \"date-fns\";\nimport equal from \"fast-deep-equal\";\nimport { memo, useEffect, useMemo, useState, lazy, Suspense } from \"react\";\nimport { useLocalStorage } from \"react-use\";\nimport useSWR from \"swr\";\n\nconst Updates = lazy(() => retry(() => import(\"./Updates\")));\n\nconst Actions = ({ date, setDate, dates, lastUpdatedDate }) => {\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [newUpdate, setNewUpdate] = useLocalStorage(\"newUpdate\", false);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage(\"lastViewedLog\", 0);\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\n\n  const { data: updates } = useSWR(\n    `${API_DOMAIN}/updatelog/log.json`,\n    fetcher,\n    {\n      refreshInterval: API_REFRESH_INTERVAL,\n    }\n  );\n\n  useEffect(() => {\n    if (updates !== undefined) {\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\n      if (lastTimestamp !== lastViewedLog) {\n        setNewUpdate(true);\n        setLastViewedLog(lastTimestamp);\n      }\n    }\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\n\n  const maxLastUpdatedDate = useMemo(() => {\n    return formatDateObjSaudia(\n      max(\n        [lastViewedLog, lastUpdatedDate]\n          .filter((date) => date)\n          .map((date) => parseSaudiaDate(date))\n      )\n    );\n  }, [lastViewedLog, lastUpdatedDate]);\n\n  return (\n    <>\n      <ActionsPanel\n        {...{\n          lastUpdatedDate: maxLastUpdatedDate,\n          newUpdate,\n          isTimelineMode,\n          setIsTimelineMode,\n          showUpdates,\n          date,\n          setDate,\n          dates,\n          setNewUpdate,\n          setShowUpdates,\n        }}\n      />\n\n      {showUpdates && (\n        <Suspense fallback={<div />}>\n          <Updates {...{ updates }} />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.lastUpdatedDate, prevProps.lastUpdatedDate)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Actions, isEqual);\n"]},"metadata":{},"sourceType":"module"}
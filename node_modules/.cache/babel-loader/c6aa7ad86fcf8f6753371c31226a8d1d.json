{"ast":null,"code":"import { scaleOrdinal } from 'd3-scale'; // export const API_DOMAIN = 'http://localhost:8080';\n// export const API_DOMAIN =\n//   'https://raw.githubusercontent.com/shuklaayush/api/test/tmp';\n// export const API_DOMAIN = 'https://api.covid19india.org';\n\nexport const API_DOMAIN = 'https://data.covid19india.org';\nexport const DATA_API_ROOT = `${API_DOMAIN}/v4/min`;\nexport const API_REFRESH_INTERVAL = 100000; // seconds\n\nexport const LOCALE_SHORTHANDS = {\n  english: 'en-US',\n  hindi: 'hi',\n  telugu: 'te',\n  kannada: 'en-US',\n  gujarati: 'gu',\n  marathi: 'en-US',\n  tamil: 'ta',\n  bengali: 'bn',\n  punjabi: 'en-US',\n  malayalam: 'en-US',\n  odiya: 'en-US'\n};\nexport const STATISTIC_CONFIGS = {\n  confirmed: {\n    displayName: 'confirmed',\n    color: '#ff073a',\n    format: 'long',\n    showDelta: true,\n    hasPrimary: true\n  },\n  active: {\n    displayName: 'active',\n    color: '#007bff',\n    format: 'long',\n    hasPrimary: true\n  },\n  recovered: {\n    displayName: 'recovered',\n    color: '#28a745',\n    format: 'long',\n    showDelta: true,\n    hasPrimary: true\n  },\n  deceased: {\n    displayName: 'deceased',\n    color: '#6c757d',\n    format: 'long',\n    showDelta: true,\n    hasPrimary: true\n  },\n  other: {\n    displayName: 'other',\n    format: 'long',\n    color: '#fd7e14',\n    showDelta: true,\n    tableConfig: {\n      notes: 'Migrated cases or non-COVID deaths'\n    },\n    hasPrimary: true\n  },\n  tested: {\n    displayName: 'tested',\n    color: '#4b1eaa',\n    format: 'short',\n    showDelta: true,\n    hideZero: true,\n    category: 'tested'\n  },\n  vaccinated1: {\n    displayName: 'vaccinated (at least one dose)',\n    color: '#fb5581',\n    format: 'short',\n    showDelta: true,\n    hideZero: true,\n    category: 'vaccinated'\n  },\n  vaccinated2: {\n    displayName: 'fully vaccinated',\n    color: '#fb5581',\n    format: 'short',\n    showDelta: true,\n    hideZero: true,\n    category: 'vaccinated'\n  },\n  vaccinated: {\n    displayName: 'vaccine doses administered',\n    color: '#fb5581',\n    format: 'short',\n    showDelta: true,\n    hideZero: true,\n    category: 'vaccinated'\n  },\n  tpr: {\n    displayName: 'test positivity ratio',\n    format: '%',\n    color: '#fd7e14',\n    nonLinear: true,\n    onlyDelta7: true,\n    hideZero: true,\n    category: 'tested',\n    tableConfig: {\n      notes: 'Calculated over last 7 days'\n    },\n    hasPrimary: true\n  },\n  cfr: {\n    displayName: 'case fatality ratio',\n    format: '%',\n    color: '#fd7e14',\n    nonLinear: true,\n    hasPrimary: true\n  },\n  recoveryRatio: {\n    displayName: 'recovery ratio',\n    format: '%',\n    nonLinear: true,\n    tableConfig: {\n      hide: true\n    },\n    hasPrimary: true\n  },\n  activeRatio: {\n    displayName: 'active ratio',\n    format: '%',\n    nonLinear: true,\n    tableConfig: {\n      hide: true\n    },\n    hasPrimary: true\n  },\n  caseGrowth: {\n    displayName: 'Case Growth',\n    format: '%',\n    nonLinear: true,\n    canBeInfinite: true,\n    tableConfig: {\n      notes: 'Percentage growth of cases last week compared to the week a fortnight ago'\n    },\n    hasPrimary: true,\n    mapConfig: {\n      transformFn: val => {\n        if (val <= 0) return '≤ 0%';else if (val <= 20) return '0 - 20%';else if (val <= 50) return '20 - 50%';else if (val > 50) return '> 50%';\n      },\n      colorScale: scaleOrdinal(['≤ 0%', '0 - 20%', '20 - 50%', '> 50%'], ['#1a9850', '#fee08b', '#fc8d59', '#d73027'])\n    }\n  },\n  population: {\n    displayName: 'population',\n    format: 'short',\n    color: '#b6854d',\n    hideZero: true,\n    mapConfig: {\n      spike: true\n    }\n  }\n};\nexport const PRIMARY_STATISTICS = ['confirmed', 'active', 'recovered', 'deceased'];\nexport const LEVEL_STATISTICS = [...PRIMARY_STATISTICS];\nexport const TABLE_STATISTICS = [...PRIMARY_STATISTICS, 'tested', 'vaccinated'];\nexport const TABLE_STATISTICS_EXPANDED = Object.keys(STATISTIC_CONFIGS).filter(_c = statistic => {\n  var _STATISTIC_CONFIGS$st, _STATISTIC_CONFIGS$st2;\n\n  return !((_STATISTIC_CONFIGS$st = STATISTIC_CONFIGS[statistic]) === null || _STATISTIC_CONFIGS$st === void 0 ? void 0 : (_STATISTIC_CONFIGS$st2 = _STATISTIC_CONFIGS$st.tableConfig) === null || _STATISTIC_CONFIGS$st2 === void 0 ? void 0 : _STATISTIC_CONFIGS$st2.hide);\n});\n_c2 = TABLE_STATISTICS_EXPANDED;\nexport const MAP_STATISTICS = [...PRIMARY_STATISTICS];\nexport const TIMESERIES_STATISTICS = [...PRIMARY_STATISTICS, 'tested', 'vaccinated', 'tpr'];\nexport const BRUSH_STATISTICS = ['confirmed'];\nexport const UPDATES_COUNT = 5;\nexport const DISTRICT_TABLE_COUNT = 40;\nexport const D3_TRANSITION_DURATION = 300;\nexport const MINIGRAPH_LOOKBACK_DAYS = 21;\nexport const TESTED_EXPIRING_DAYS = 7;\nexport const UNASSIGNED_STATE_CODE = 'UN';\nexport const UNKNOWN_DISTRICT_KEY = 'Unknown';\nexport const DISTRICT_START_DATE = '2020-04-26';\nexport const DISTRICT_TEST_END_DATE = '2021-02-02';\nexport const ISO_DATE_REGEX = /^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$/g;\nexport const SAUDIA_ISO_SUFFIX = 'T00:00:00+05:30';\nexport const SPRING_CONFIG_NUMBERS = {\n  clamp: true,\n  precision: 1\n};\nexport const TIMESERIES_CHART_TYPES = {\n  total: 'Cumulative',\n  delta: 'Daily'\n};\nexport const TIMESERIES_LOOKBACK_DAYS = [null, 90, 30];\nexport const MAP_VIZS = {\n  CHOROPLETH: 0,\n  BUBBLE: 1,\n  SPIKE: 2\n};\nexport const MAP_VIEWS = {\n  STATES: 0,\n  DISTRICTS: 1\n};\nexport const MAP_TYPES = {\n  COUNTRY: 0,\n  STATE: 1\n};\nexport const MAPS_DIR = process.env.NODE_ENV === 'production' ? '/mini_maps' : '/projected_maps';\nexport const MAP_META = {\n  AP: {\n    geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  AR: {\n    geoDataFile: `${MAPS_DIR}/arunachalpradesh.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  AS: {\n    geoDataFile: `${MAPS_DIR}/assam.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  BR: {\n    geoDataFile: `${MAPS_DIR}/bihar.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  CT: {\n    geoDataFile: `${MAPS_DIR}/chhattisgarh.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  GA: {\n    geoDataFile: `${MAPS_DIR}/goa.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  GJ: {\n    geoDataFile: `${MAPS_DIR}/gujarat.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  HR: {\n    geoDataFile: `${MAPS_DIR}/haryana.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  HP: {\n    geoDataFile: `${MAPS_DIR}/himachalpradesh.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  JK: {\n    geoDataFile: `${MAPS_DIR}/jammukashmir.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  JH: {\n    geoDataFile: `${MAPS_DIR}/jharkhand.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  KA: {\n    geoDataFile: `${MAPS_DIR}/karnataka.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  KL: {\n    geoDataFile: `${MAPS_DIR}/kerala.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  MP: {\n    geoDataFile: `${MAPS_DIR}/madhyapradesh.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  MH: {\n    geoDataFile: `${MAPS_DIR}/maharashtra.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  MN: {\n    geoDataFile: `${MAPS_DIR}/manipur.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  ML: {\n    geoDataFile: `${MAPS_DIR}/meghalaya.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  MZ: {\n    geoDataFile: `${MAPS_DIR}/mizoram.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  NL: {\n    geoDataFile: `${MAPS_DIR}/nagaland.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  OR: {\n    geoDataFile: `${MAPS_DIR}/odisha.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  PB: {\n    geoDataFile: `${MAPS_DIR}/punjab.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  RJ: {\n    geoDataFile: `${MAPS_DIR}/rajasthan.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  SK: {\n    geoDataFile: `${MAPS_DIR}/sikkim.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  TN: {\n    geoDataFile: `${MAPS_DIR}/tamilnadu.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  TG: {\n    geoDataFile: `${MAPS_DIR}/telangana.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  TR: {\n    geoDataFile: `${MAPS_DIR}/tripura.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  UT: {\n    geoDataFile: `${MAPS_DIR}/uttarakhand.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  UP: {\n    geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  WB: {\n    geoDataFile: `${MAPS_DIR}/westbengal.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  AN: {\n    geoDataFile: `${MAPS_DIR}/andamannicobarislands.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  CH: {\n    geoDataFile: `${MAPS_DIR}/chandigarh.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  DN: {\n    geoDataFile: `${MAPS_DIR}/dnh-and-dd.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  DL: {\n    geoDataFile: `${MAPS_DIR}/delhi.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  LA: {\n    geoDataFile: `${MAPS_DIR}/ladakh.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  LD: {\n    geoDataFile: `${MAPS_DIR}/lakshadweep.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  PY: {\n    geoDataFile: `${MAPS_DIR}/puducherry.json`,\n    mapType: MAP_TYPES.STATE\n  },\n  TT: {\n    geoDataFile: \"${MAPS_DIR}/india.json\",\n    mapType: MAP_TYPES.COUNTRY\n  }\n};\nexport const MAP_DIMENSIONS = [432, 488];\nexport const MAP_LEGEND_HEIGHT = 50;\nexport const STATE_NAMES = {\n  AP: 'Andhra Pradesh',\n  AR: 'Arunachal Pradesh',\n  AS: 'Assam',\n  BR: 'Bihar',\n  CT: 'Chhattisgarh',\n  GA: 'Goa',\n  GJ: 'Gujarat',\n  HR: 'Haryana',\n  HP: 'Himachal Pradesh',\n  JH: 'Jharkhand',\n  KA: 'Karnataka',\n  KL: 'Kerala',\n  MP: 'Madhya Pradesh',\n  MH: 'Maharashtra',\n  MN: 'Manipur',\n  ML: 'Meghalaya',\n  MZ: 'Mizoram',\n  NL: 'Nagaland',\n  OR: 'Odisha',\n  PB: 'Punjab',\n  RJ: 'Rajasthan',\n  SK: 'Sikkim',\n  TN: 'Tamil Nadu',\n  TG: 'Telangana',\n  TR: 'Tripura',\n  UT: 'Uttarakhand',\n  UP: 'Uttar Pradesh',\n  WB: 'West Bengal',\n  AN: 'Andaman and Nicobar Islands',\n  CH: 'Chandigarh',\n  DN: 'Dadra and Nagar Haveli and Daman and Diu',\n  DL: 'Delhi',\n  JK: 'Jammu and Kashmir',\n  LA: 'Ladakh',\n  LD: 'Lakshadweep',\n  PY: 'Puducherry',\n  TT: 'India',\n  [UNASSIGNED_STATE_CODE]: 'Unassigned'\n};\nconst stateCodes = [];\nconst stateCodesMap = {};\nObject.keys(STATE_NAMES).map((key, index) => {\n  stateCodesMap[STATE_NAMES[key]] = key;\n  stateCodes.push({\n    code: key,\n    name: STATE_NAMES[key]\n  });\n  return null;\n});\nexport const STATE_CODES = stateCodesMap;\nexport const STATE_CODES_ARRAY = stateCodes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TABLE_STATISTICS_EXPANDED$Object.keys(STATISTIC_CONFIGS).filter\");\n$RefreshReg$(_c2, \"TABLE_STATISTICS_EXPANDED\");","map":{"version":3,"sources":["/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/d3ia/src/constants.js"],"names":["scaleOrdinal","API_DOMAIN","DATA_API_ROOT","API_REFRESH_INTERVAL","LOCALE_SHORTHANDS","english","hindi","telugu","kannada","gujarati","marathi","tamil","bengali","punjabi","malayalam","odiya","STATISTIC_CONFIGS","confirmed","displayName","color","format","showDelta","hasPrimary","active","recovered","deceased","other","tableConfig","notes","tested","hideZero","category","vaccinated1","vaccinated2","vaccinated","tpr","nonLinear","onlyDelta7","cfr","recoveryRatio","hide","activeRatio","caseGrowth","canBeInfinite","mapConfig","transformFn","val","colorScale","population","spike","PRIMARY_STATISTICS","LEVEL_STATISTICS","TABLE_STATISTICS","TABLE_STATISTICS_EXPANDED","Object","keys","filter","statistic","MAP_STATISTICS","TIMESERIES_STATISTICS","BRUSH_STATISTICS","UPDATES_COUNT","DISTRICT_TABLE_COUNT","D3_TRANSITION_DURATION","MINIGRAPH_LOOKBACK_DAYS","TESTED_EXPIRING_DAYS","UNASSIGNED_STATE_CODE","UNKNOWN_DISTRICT_KEY","DISTRICT_START_DATE","DISTRICT_TEST_END_DATE","ISO_DATE_REGEX","SAUDIA_ISO_SUFFIX","SPRING_CONFIG_NUMBERS","clamp","precision","TIMESERIES_CHART_TYPES","total","delta","TIMESERIES_LOOKBACK_DAYS","MAP_VIZS","CHOROPLETH","BUBBLE","SPIKE","MAP_VIEWS","STATES","DISTRICTS","MAP_TYPES","COUNTRY","STATE","MAPS_DIR","process","env","NODE_ENV","MAP_META","AP","geoDataFile","mapType","AR","AS","BR","CT","GA","GJ","HR","HP","JK","JH","KA","KL","MP","MH","MN","ML","MZ","NL","OR","PB","RJ","SK","TN","TG","TR","UT","UP","WB","AN","CH","DN","DL","LA","LD","PY","TT","MAP_DIMENSIONS","MAP_LEGEND_HEIGHT","STATE_NAMES","stateCodes","stateCodesMap","map","key","index","push","code","name","STATE_CODES","STATE_CODES_ARRAY"],"mappings":"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","sourcesContent":["import {scaleOrdinal} from 'd3-scale';\n\n// export const API_DOMAIN = 'http://localhost:8080';\n// export const API_DOMAIN =\n//   'https://raw.githubusercontent.com/shuklaayush/api/test/tmp';\n// export const API_DOMAIN = 'https://api.covid19india.org';\nexport const API_DOMAIN = 'https://data.covid19india.org';\n\nexport const DATA_API_ROOT = `${API_DOMAIN}/v4/min`;\nexport const API_REFRESH_INTERVAL = 100000; // seconds\n\nexport const LOCALE_SHORTHANDS = {\n    english: 'en-US',\n    hindi: 'hi',\n    telugu: 'te',\n    kannada: 'en-US',\n    gujarati: 'gu',\n    marathi: 'en-US',\n    tamil: 'ta',\n    bengali: 'bn',\n    punjabi: 'en-US',\n    malayalam: 'en-US',\n    odiya: 'en-US',\n};\n\nexport const STATISTIC_CONFIGS = {\n    confirmed: {\n        displayName: 'confirmed',\n        color: '#ff073a',\n        format: 'long',\n        showDelta: true,\n        hasPrimary: true,\n    },\n    active: {\n        displayName: 'active',\n        color: '#007bff',\n        format: 'long',\n        hasPrimary: true,\n    },\n    recovered: {\n        displayName: 'recovered',\n        color: '#28a745',\n        format: 'long',\n        showDelta: true,\n        hasPrimary: true,\n    },\n    deceased: {\n        displayName: 'deceased',\n        color: '#6c757d',\n        format: 'long',\n        showDelta: true,\n        hasPrimary: true,\n    },\n    other: {\n        displayName: 'other',\n        format: 'long',\n        color: '#fd7e14',\n        showDelta: true,\n        tableConfig: {\n            notes: 'Migrated cases or non-COVID deaths',\n        },\n        hasPrimary: true,\n    },\n    tested: {\n        displayName: 'tested',\n        color: '#4b1eaa',\n        format: 'short',\n        showDelta: true,\n        hideZero: true,\n        category: 'tested',\n    },\n    vaccinated1: {\n        displayName: 'vaccinated (at least one dose)',\n        color: '#fb5581',\n        format: 'short',\n        showDelta: true,\n        hideZero: true,\n        category: 'vaccinated',\n    },\n    vaccinated2: {\n        displayName: 'fully vaccinated',\n        color: '#fb5581',\n        format: 'short',\n        showDelta: true,\n        hideZero: true,\n        category: 'vaccinated',\n    },\n    vaccinated: {\n        displayName: 'vaccine doses administered',\n        color: '#fb5581',\n        format: 'short',\n        showDelta: true,\n        hideZero: true,\n        category: 'vaccinated',\n    },\n    tpr: {\n        displayName: 'test positivity ratio',\n        format: '%',\n        color: '#fd7e14',\n        nonLinear: true,\n        onlyDelta7: true,\n        hideZero: true,\n        category: 'tested',\n        tableConfig: {\n            notes: 'Calculated over last 7 days',\n        },\n        hasPrimary: true,\n    },\n    cfr: {\n        displayName: 'case fatality ratio',\n        format: '%',\n        color: '#fd7e14',\n        nonLinear: true,\n        hasPrimary: true,\n    },\n    recoveryRatio: {\n        displayName: 'recovery ratio',\n        format: '%',\n        nonLinear: true,\n        tableConfig: {\n            hide: true,\n        },\n        hasPrimary: true,\n    },\n    activeRatio: {\n        displayName: 'active ratio',\n        format: '%',\n        nonLinear: true,\n        tableConfig: {\n            hide: true,\n        },\n        hasPrimary: true,\n    },\n    caseGrowth: {\n        displayName: 'Case Growth',\n        format: '%',\n        nonLinear: true,\n        canBeInfinite: true,\n        tableConfig: {\n            notes:\n                'Percentage growth of cases last week compared to the week a fortnight ago',\n        },\n        hasPrimary: true,\n        mapConfig: {\n            transformFn: (val) => {\n                if (val <= 0) return '≤ 0%';\n                else if (val <= 20) return '0 - 20%';\n                else if (val <= 50) return '20 - 50%';\n                else if (val > 50) return '> 50%';\n            },\n            colorScale: scaleOrdinal(\n                ['≤ 0%', '0 - 20%', '20 - 50%', '> 50%'],\n                ['#1a9850', '#fee08b', '#fc8d59', '#d73027']\n            ),\n        },\n    },\n    population: {\n        displayName: 'population',\n        format: 'short',\n        color: '#b6854d',\n        hideZero: true,\n        mapConfig: {\n            spike: true,\n        },\n    },\n};\n\nexport const PRIMARY_STATISTICS = [\n    'confirmed',\n    'active',\n    'recovered',\n    'deceased',\n];\n\nexport const LEVEL_STATISTICS = [...PRIMARY_STATISTICS];\n\nexport const TABLE_STATISTICS = [...PRIMARY_STATISTICS, 'tested', 'vaccinated'];\n\nexport const TABLE_STATISTICS_EXPANDED = Object.keys(STATISTIC_CONFIGS).filter(\n    (statistic) => !STATISTIC_CONFIGS[statistic]?.tableConfig?.hide\n);\n\nexport const MAP_STATISTICS = [...PRIMARY_STATISTICS];\n\nexport const TIMESERIES_STATISTICS = [\n    ...PRIMARY_STATISTICS,\n    'tested',\n    'vaccinated',\n    'tpr',\n];\n\nexport const BRUSH_STATISTICS = ['confirmed'];\n\nexport const UPDATES_COUNT = 5;\n\nexport const DISTRICT_TABLE_COUNT = 40;\n\nexport const D3_TRANSITION_DURATION = 300;\n\nexport const MINIGRAPH_LOOKBACK_DAYS = 21;\n\nexport const TESTED_EXPIRING_DAYS = 7;\n\nexport const UNASSIGNED_STATE_CODE = 'UN';\n\nexport const UNKNOWN_DISTRICT_KEY = 'Unknown';\n\nexport const DISTRICT_START_DATE = '2020-04-26';\n\nexport const DISTRICT_TEST_END_DATE = '2021-02-02';\n\nexport const ISO_DATE_REGEX = /^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$/g;\n\nexport const SAUDIA_ISO_SUFFIX = 'T00:00:00+05:30';\n\nexport const SPRING_CONFIG_NUMBERS = {clamp: true, precision: 1};\n\nexport const TIMESERIES_CHART_TYPES = {\n    total: 'Cumulative',\n    delta: 'Daily',\n};\n\nexport const TIMESERIES_LOOKBACK_DAYS = [null, 90, 30];\n\nexport const MAP_VIZS = {\n    CHOROPLETH: 0,\n    BUBBLE: 1,\n    SPIKE: 2,\n};\n\nexport const MAP_VIEWS = {\n    STATES: 0,\n    DISTRICTS: 1,\n};\n\nexport const MAP_TYPES = {\n    COUNTRY: 0,\n    STATE: 1,\n};\n\nexport const MAPS_DIR =\n    process.env.NODE_ENV === 'production' ? '/mini_maps' : '/projected_maps';\n\nexport const MAP_META = {\n    AP: {\n        geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    AR: {\n        geoDataFile: `${MAPS_DIR}/arunachalpradesh.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    AS: {\n        geoDataFile: `${MAPS_DIR}/assam.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    BR: {\n        geoDataFile: `${MAPS_DIR}/bihar.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    CT: {\n        geoDataFile: `${MAPS_DIR}/chhattisgarh.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    GA: {\n        geoDataFile: `${MAPS_DIR}/goa.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    GJ: {\n        geoDataFile: `${MAPS_DIR}/gujarat.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    HR: {\n        geoDataFile: `${MAPS_DIR}/haryana.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    HP: {\n        geoDataFile: `${MAPS_DIR}/himachalpradesh.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    JK: {\n        geoDataFile: `${MAPS_DIR}/jammukashmir.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    JH: {\n        geoDataFile: `${MAPS_DIR}/jharkhand.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    KA: {\n        geoDataFile: `${MAPS_DIR}/karnataka.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    KL: {\n        geoDataFile: `${MAPS_DIR}/kerala.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    MP: {\n        geoDataFile: `${MAPS_DIR}/madhyapradesh.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    MH: {\n        geoDataFile: `${MAPS_DIR}/maharashtra.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    MN: {\n        geoDataFile: `${MAPS_DIR}/manipur.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    ML: {\n        geoDataFile: `${MAPS_DIR}/meghalaya.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    MZ: {\n        geoDataFile: `${MAPS_DIR}/mizoram.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    NL: {\n        geoDataFile: `${MAPS_DIR}/nagaland.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    OR: {\n        geoDataFile: `${MAPS_DIR}/odisha.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    PB: {\n        geoDataFile: `${MAPS_DIR}/punjab.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    RJ: {\n        geoDataFile: `${MAPS_DIR}/rajasthan.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    SK: {\n        geoDataFile: `${MAPS_DIR}/sikkim.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    TN: {\n        geoDataFile: `${MAPS_DIR}/tamilnadu.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    TG: {\n        geoDataFile: `${MAPS_DIR}/telangana.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    TR: {\n        geoDataFile: `${MAPS_DIR}/tripura.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    UT: {\n        geoDataFile: `${MAPS_DIR}/uttarakhand.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    UP: {\n        geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    WB: {\n        geoDataFile: `${MAPS_DIR}/westbengal.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    AN: {\n        geoDataFile: `${MAPS_DIR}/andamannicobarislands.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    CH: {\n        geoDataFile: `${MAPS_DIR}/chandigarh.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    DN: {\n        geoDataFile: `${MAPS_DIR}/dnh-and-dd.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    DL: {\n        geoDataFile: `${MAPS_DIR}/delhi.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    LA: {\n        geoDataFile: `${MAPS_DIR}/ladakh.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    LD: {\n        geoDataFile: `${MAPS_DIR}/lakshadweep.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    PY: {\n        geoDataFile: `${MAPS_DIR}/puducherry.json`,\n        mapType: MAP_TYPES.STATE,\n    },\n    TT: {\n        geoDataFile: \"${MAPS_DIR}/india.json\",\n        mapType: MAP_TYPES.COUNTRY,\n    },\n};\n\nexport const MAP_DIMENSIONS = [432, 488];\nexport const MAP_LEGEND_HEIGHT = 50;\n\nexport const STATE_NAMES = {\n    AP: 'Andhra Pradesh',\n    AR: 'Arunachal Pradesh',\n    AS: 'Assam',\n    BR: 'Bihar',\n    CT: 'Chhattisgarh',\n    GA: 'Goa',\n    GJ: 'Gujarat',\n    HR: 'Haryana',\n    HP: 'Himachal Pradesh',\n    JH: 'Jharkhand',\n    KA: 'Karnataka',\n    KL: 'Kerala',\n    MP: 'Madhya Pradesh',\n    MH: 'Maharashtra',\n    MN: 'Manipur',\n    ML: 'Meghalaya',\n    MZ: 'Mizoram',\n    NL: 'Nagaland',\n    OR: 'Odisha',\n    PB: 'Punjab',\n    RJ: 'Rajasthan',\n    SK: 'Sikkim',\n    TN: 'Tamil Nadu',\n    TG: 'Telangana',\n    TR: 'Tripura',\n    UT: 'Uttarakhand',\n    UP: 'Uttar Pradesh',\n    WB: 'West Bengal',\n    AN: 'Andaman and Nicobar Islands',\n    CH: 'Chandigarh',\n    DN: 'Dadra and Nagar Haveli and Daman and Diu',\n    DL: 'Delhi',\n    JK: 'Jammu and Kashmir',\n    LA: 'Ladakh',\n    LD: 'Lakshadweep',\n    PY: 'Puducherry',\n    TT: 'India',\n    [UNASSIGNED_STATE_CODE]: 'Unassigned',\n};\n\nconst stateCodes = [];\nconst stateCodesMap = {};\nObject.keys(STATE_NAMES).map((key, index) => {\n    stateCodesMap[STATE_NAMES[key]] = key;\n    stateCodes.push({code: key, name: STATE_NAMES[key]});\n    return null;\n});\nexport const STATE_CODES = stateCodesMap;\nexport const STATE_CODES_ARRAY = stateCodes;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nconst OPTIONS = {\n  root: null,\n  rootMargin: '0px 0px 0px 0px',\n  threshold: 0\n};\n\nconst useIsVisible = elementRef => {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(false);\n  useEffect(() => {\n    if (elementRef.current) {\n      const observer = new IntersectionObserver((entries, observer) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            setIsVisible(true);\n            observer.unobserve(elementRef.current);\n          }\n        });\n      }, OPTIONS);\n      observer.observe(elementRef.current);\n    }\n  }, [elementRef]);\n  return isVisible;\n};\n\n_s(useIsVisible, \"J3yJOyGdBT4L7hs1p1XQYVGMdrY=\");\n\nexport default useIsVisible;","map":{"version":3,"sources":["/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/d3ia/src/hooks/useIsVisible.js"],"names":["useState","useEffect","OPTIONS","root","rootMargin","threshold","useIsVisible","elementRef","isVisible","setIsVisible","current","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","unobserve","observe"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE,IADM;AAEZC,EAAAA,UAAU,EAAE,iBAFA;AAGZC,EAAAA,SAAS,EAAE;AAHC,CAAhB;;AAMA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AAAA;;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,UAAU,CAACG,OAAf,EAAwB;AACpB,YAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,CAACC,OAAD,EAAUF,QAAV,KAAuB;AAC7DE,QAAAA,OAAO,CAACC,OAAR,CAAiBC,KAAD,IAAW;AACvB,cAAIA,KAAK,CAACC,cAAV,EAA0B;AACtBP,YAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,YAAAA,QAAQ,CAACM,SAAT,CAAmBV,UAAU,CAACG,OAA9B;AACH;AACJ,SALD;AAMH,OAPgB,EAOdR,OAPc,CAAjB;AAQAS,MAAAA,QAAQ,CAACO,OAAT,CAAiBX,UAAU,CAACG,OAA5B;AACH;AACJ,GAZQ,EAYN,CAACH,UAAD,CAZM,CAAT;AAcA,SAAOC,SAAP;AACH,CAlBD;;GAAMF,Y;;AAoBN,eAAeA,YAAf","sourcesContent":["import {useState, useEffect} from 'react';\n\nconst OPTIONS = {\n    root: null,\n    rootMargin: '0px 0px 0px 0px',\n    threshold: 0,\n};\n\nconst useIsVisible = (elementRef) => {\n    const [isVisible, setIsVisible] = useState(false);\n\n    useEffect(() => {\n        if (elementRef.current) {\n            const observer = new IntersectionObserver((entries, observer) => {\n                entries.forEach((entry) => {\n                    if (entry.isIntersecting) {\n                        setIsVisible(true);\n                        observer.unobserve(elementRef.current);\n                    }\n                });\n            }, OPTIONS);\n            observer.observe(elementRef.current);\n        }\n    }, [elementRef]);\n\n    return isVisible;\n};\n\nexport default useIsVisible;\n"]},"metadata":{},"sourceType":"module"}
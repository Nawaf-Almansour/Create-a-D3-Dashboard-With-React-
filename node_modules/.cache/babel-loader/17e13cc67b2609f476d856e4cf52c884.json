{"ast":null,"code":"var _jsxFileName = \"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/d3ia/src/components/Actions.js\",\n    _s = $RefreshSig$();\n\nimport ActionsPanel from './ActionsPanel';\nimport { API_DOMAIN, API_REFRESH_INTERVAL } from '../constants';\nimport { fetcher, formatDateObjIndia, parseIndiaDate, retry } from '../utils/commonFunctions';\nimport { max } from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport { memo, useEffect, useMemo, useState, lazy, Suspense } from 'react';\nimport { useLocalStorage } from 'react-use';\nimport useSWR from 'swr';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Updates = /*#__PURE__*/lazy(_c = () => retry(() => import('./Updates')));\n_c2 = Updates;\n\nconst Actions = ({\n  date,\n  setDate,\n  dates,\n  lastUpdatedDate\n}) => {\n  _s();\n\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage('lastViewedLog', 0);\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\n  const {\n    data: updates\n  } = useSWR(`${API_DOMAIN}/updatelog/log.json`, fetcher, {\n    refreshInterval: API_REFRESH_INTERVAL\n  });\n  useEffect(() => {\n    if (updates !== undefined) {\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\n\n      if (lastTimestamp !== lastViewedLog) {\n        setNewUpdate(true);\n        setLastViewedLog(lastTimestamp);\n      }\n    }\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\n  const maxLastUpdatedDate = useMemo(() => {\n    return formatDateObjIndia(max([lastViewedLog, lastUpdatedDate].filter(date => date).map(date => parseIndiaDate(date))));\n  }, [lastViewedLog, lastUpdatedDate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ActionsPanel, {\n      lastUpdatedDate: maxLastUpdatedDate,\n      newUpdate,\n      isTimelineMode,\n      setIsTimelineMode,\n      showUpdates,\n      date,\n      setDate,\n      dates,\n      setNewUpdate,\n      setShowUpdates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), showUpdates && /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 37\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Updates, {\n        updates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Actions, \"pb0fEhAO8E9s4LWMAovIJmRiy+s=\", false, function () {\n  return [useLocalStorage, useLocalStorage, useSWR];\n});\n\n_c3 = Actions;\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.lastUpdatedDate, prevProps.lastUpdatedDate)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default _c4 = /*#__PURE__*/memo(Actions, isEqual);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Updates$lazy\");\n$RefreshReg$(_c2, \"Updates\");\n$RefreshReg$(_c3, \"Actions\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"sources":["/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/d3ia/src/components/Actions.js"],"names":["ActionsPanel","API_DOMAIN","API_REFRESH_INTERVAL","fetcher","formatDateObjIndia","parseIndiaDate","retry","max","equal","memo","useEffect","useMemo","useState","lazy","Suspense","useLocalStorage","useSWR","Updates","Actions","date","setDate","dates","lastUpdatedDate","showUpdates","setShowUpdates","newUpdate","setNewUpdate","lastViewedLog","setLastViewedLog","isTimelineMode","setIsTimelineMode","data","updates","refreshInterval","undefined","lastTimestamp","slice","reverse","timestamp","maxLastUpdatedDate","filter","map","isEqual","prevProps","currProps"],"mappings":"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","sourcesContent":["import ActionsPanel from './ActionsPanel';\n\nimport {API_DOMAIN, API_REFRESH_INTERVAL} from '../constants';\nimport {\n    fetcher,\n    formatDateObjIndia,\n    parseIndiaDate,\n    retry,\n} from '../utils/commonFunctions';\n\nimport {max} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport {memo, useEffect, useMemo, useState, lazy, Suspense} from 'react';\nimport {useLocalStorage} from 'react-use';\nimport useSWR from 'swr';\n\nconst Updates = lazy(() => retry(() => import('./Updates')));\n\nconst Actions = ({date, setDate, dates, lastUpdatedDate}) => {\n    const [showUpdates, setShowUpdates] = useState(false);\n    const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\n    const [lastViewedLog, setLastViewedLog] = useLocalStorage('lastViewedLog', 0);\n    const [isTimelineMode, setIsTimelineMode] = useState(false);\n\n    const {data: updates} = useSWR(`${API_DOMAIN}/updatelog/log.json`, fetcher, {\n        refreshInterval: API_REFRESH_INTERVAL,\n    });\n\n    useEffect(() => {\n        if (updates !== undefined) {\n            const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\n            if (lastTimestamp !== lastViewedLog) {\n                setNewUpdate(true);\n                setLastViewedLog(lastTimestamp);\n            }\n        }\n    }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\n\n    const maxLastUpdatedDate = useMemo(() => {\n        return formatDateObjIndia(\n            max(\n                [lastViewedLog, lastUpdatedDate]\n                    .filter((date) => date)\n                    .map((date) => parseIndiaDate(date))\n            )\n        );\n    }, [lastViewedLog, lastUpdatedDate]);\n\n    return (\n        <>\n            <ActionsPanel\n                {...{\n                    lastUpdatedDate: maxLastUpdatedDate,\n                    newUpdate,\n                    isTimelineMode,\n                    setIsTimelineMode,\n                    showUpdates,\n                    date,\n                    setDate,\n                    dates,\n                    setNewUpdate,\n                    setShowUpdates,\n                }}\n            />\n\n            {showUpdates && (\n                <Suspense fallback={<div />}>\n                    <Updates {...{updates}} />\n                </Suspense>\n            )}\n        </>\n    );\n};\n\nconst isEqual = (prevProps, currProps) => {\n    if (!equal(currProps.date, prevProps.date)) {\n        return false;\n    } else if (!equal(currProps.lastUpdatedDate, prevProps.lastUpdatedDate)) {\n        return false;\n    } else if (!equal(currProps.dates, prevProps.dates)) {\n        return false;\n    }\n    return true;\n};\n\nexport default memo(Actions, isEqual);\n"]},"metadata":{},"sourceType":"module"}
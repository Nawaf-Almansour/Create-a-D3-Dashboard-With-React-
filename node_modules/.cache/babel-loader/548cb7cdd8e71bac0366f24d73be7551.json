{"ast":null,"code":"var _jsxFileName = \"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/d3ia/src/components/MapVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport MapLegend from './MapLegend';\nimport { D3_TRANSITION_DURATION, MAP_DIMENSIONS, MAP_META, MAP_TYPES, MAP_VIZS, STATE_CODES, STATE_NAMES, STATISTIC_CONFIGS, UNKNOWN_DISTRICT_KEY } from '../constants';\nimport { formatNumber, spike, toTitleCase } from '../utils/commonFunctions';\nimport { AlertIcon } from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport { max } from 'd3-array';\nimport { json } from 'd3-fetch';\nimport { geoIdentity, geoPath } from 'd3-geo';\nimport { scaleLinear, scaleSqrt, scaleSequential } from 'd3-scale';\nimport { interpolateReds, interpolateBlues, interpolateGreens, interpolateGreys, interpolatePurples, interpolateOranges, interpolatePiYG } from 'd3-scale-chromatic';\nimport { select } from 'd3-selection';\nimport { transition } from 'd3-transition';\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory } from 'react-router-dom';\nimport useSWR from 'swr';\nimport { feature, mesh } from 'topojson-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst colorInterpolator = statistic => {\n  var _STATISTIC_CONFIGS$st;\n\n  if (statistic === 'confirmed') {\n    return t => interpolateReds(t * 0.85);\n  } else if (statistic === 'active') {\n    return t => interpolateBlues(t * 0.85);\n  } else if (statistic === 'recovered') {\n    return t => interpolateGreens(t * 0.85);\n  } else if (statistic === 'deceased') {\n    return t => interpolateGreys(t * 0.85);\n  } else if (statistic === 'tested') {\n    return t => interpolatePurples(t * 0.85);\n  } else if (statistic === 'tpr' || statistic === 'cfr' || statistic === 'other') {\n    return t => interpolateOranges(t * 0.85);\n  } else if (((_STATISTIC_CONFIGS$st = STATISTIC_CONFIGS[statistic]) === null || _STATISTIC_CONFIGS$st === void 0 ? void 0 : _STATISTIC_CONFIGS$st.category) === 'vaccinated') {\n    return t => interpolatePiYG(0.15 + 0.35 * (1 - t));\n  } else {\n    return t => interpolateOranges(t * 0.85);\n  }\n};\n\nfunction MapVisualizer({\n  mapCode,\n  isDistrictView,\n  mapViz,\n  data,\n  regionHighlighted,\n  setRegionHighlighted,\n  statistic,\n  getMapStatistic,\n  transformStatistic,\n  noDistrictData\n}) {\n  _s();\n\n  var _statisticConfig$mapC;\n\n  const {\n    t\n  } = useTranslation();\n  const svgRef = useRef(null);\n  const mapMeta = MAP_META[mapCode];\n  const history = useHistory();\n  const {\n    data: geoData\n  } = useSWR(mapMeta.geoDataFile, async file => {\n    return await json(file);\n  }, {\n    suspense: false,\n    revalidateOnFocus: false\n  });\n  const statisticTotal = useMemo(() => {\n    return getMapStatistic(data[mapCode]);\n  }, [data, mapCode, getMapStatistic]);\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n  const strokeColor = useCallback(alpha => ((statisticConfig === null || statisticConfig === void 0 ? void 0 : statisticConfig.color) || '#343a40') + alpha, [statisticConfig]);\n  const features = useMemo(() => {\n    if (!geoData) return null;\n    const featuresWrap = !isDistrictView ? feature(geoData, geoData.objects.states).features : mapMeta.mapType === MAP_TYPES.COUNTRY && mapViz !== MAP_VIZS.CHOROPLETH ? [...feature(geoData, geoData.objects.states).features, ...feature(geoData, geoData.objects.districts).features] : feature(geoData, geoData.objects.districts).features; // Add id to each feature\n\n    return featuresWrap.map(feature => {\n      const district = feature.properties.district;\n      const state = feature.properties.st_nm;\n      const obj = Object.assign({}, feature);\n      obj.id = `${mapCode}-${state}${district ? '-' + district : ''}`;\n      return obj;\n    });\n  }, [geoData, mapCode, isDistrictView, mapViz, mapMeta]);\n  const districtsSet = useMemo(() => {\n    if (!geoData || !isDistrictView) return {};\n    return feature(geoData, geoData.objects.districts).features.reduce((stateCodes, feature) => {\n      const stateCode = STATE_CODES[feature.properties.st_nm];\n\n      if (!stateCodes[stateCode]) {\n        stateCodes[stateCode] = new Set();\n      }\n\n      stateCodes[stateCode].add(feature.properties.district);\n      return stateCodes;\n    }, {});\n  }, [geoData, isDistrictView]);\n  const statisticMax = useMemo(() => {\n    const stateCodes = Object.keys(data).filter(stateCode => stateCode !== 'TT' && Object.keys(MAP_META).includes(stateCode));\n\n    if (!isDistrictView) {\n      return max(stateCodes, stateCode => transformStatistic(getMapStatistic(data[stateCode])));\n    } else {\n      const districtData = stateCodes.reduce((res, stateCode) => {\n        var _data$stateCode;\n\n        const districts = Object.keys(((_data$stateCode = data[stateCode]) === null || _data$stateCode === void 0 ? void 0 : _data$stateCode.districts) || []).filter(districtName => ((districtsSet === null || districtsSet === void 0 ? void 0 : districtsSet[stateCode]) || new Set()).has(districtName) || mapViz !== MAP_VIZS.CHOROPLETH && districtName === UNKNOWN_DISTRICT_KEY);\n        res.push(...districts.map(districtName => transformStatistic(getMapStatistic(data[stateCode].districts[districtName]))));\n        return res;\n      }, []);\n      return max(districtData);\n    }\n  }, [data, isDistrictView, getMapStatistic, mapViz, districtsSet, transformStatistic]);\n  const mapScale = useMemo(() => {\n    var _STATISTIC_CONFIGS$st2, _STATISTIC_CONFIGS$st3;\n\n    if (mapViz === MAP_VIZS.BUBBLE) {\n      // No negative values\n      return scaleSqrt([0, Math.max(1, statisticMax || 0)], [0, 40]).clamp(true).nice(3);\n    } else if (mapViz === MAP_VIZS.SPIKE) {\n      return scaleLinear([0, Math.max(1, statisticMax || 0)], [0, 80]).clamp(true).nice(3);\n    } else if ((_STATISTIC_CONFIGS$st2 = STATISTIC_CONFIGS[statistic]) === null || _STATISTIC_CONFIGS$st2 === void 0 ? void 0 : (_STATISTIC_CONFIGS$st3 = _STATISTIC_CONFIGS$st2.mapConfig) === null || _STATISTIC_CONFIGS$st3 === void 0 ? void 0 : _STATISTIC_CONFIGS$st3.colorScale) {\n      return STATISTIC_CONFIGS[statistic].mapConfig.colorScale;\n    } else {\n      // No negative values\n      return scaleSequential([0, Math.max(1, statisticMax || 0)], colorInterpolator(statistic)).clamp(true);\n    }\n  }, [mapViz, statistic, statisticMax]);\n  const fillColor = useCallback(d => {\n    if (mapViz === MAP_VIZS.CHOROPLETH) {\n      var _stateData$districts;\n\n      const stateCode = STATE_CODES[d.properties.st_nm];\n      const district = d.properties.district;\n      const stateData = data[stateCode];\n      const districtData = stateData === null || stateData === void 0 ? void 0 : (_stateData$districts = stateData.districts) === null || _stateData$districts === void 0 ? void 0 : _stateData$districts[district];\n      const n = transformStatistic(getMapStatistic(district ? districtData : stateData));\n      const color = n ? mapScale(n) : '#ffffff00';\n      return color;\n    }\n  }, [mapViz, data, mapScale, getMapStatistic, transformStatistic]);\n  const populateTexts = useCallback(regionSelection => {\n    regionSelection.select('title').text(d => {\n      if (mapViz !== MAP_VIZS.CHOROPLETH && !(statisticConfig === null || statisticConfig === void 0 ? void 0 : statisticConfig.nonLinear)) {\n        var _stateData$districts2;\n\n        const state = d.properties.st_nm;\n        const stateCode = STATE_CODES[state];\n        const district = d.properties.district;\n        const stateData = data[stateCode];\n        const districtData = stateData === null || stateData === void 0 ? void 0 : (_stateData$districts2 = stateData.districts) === null || _stateData$districts2 === void 0 ? void 0 : _stateData$districts2[district];\n        let n;\n        if (district) n = getMapStatistic(districtData);else n = getMapStatistic(stateData);\n        return `${formatNumber(100 * (n / (statisticTotal || 0.001)), '%')} from ${toTitleCase(district ? district : state)}`;\n      }\n    });\n  }, [mapViz, data, getMapStatistic, statisticTotal, statisticConfig]);\n  const onceTouchedRegion = useRef(null); // Reset on tapping outside map\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    svg.attr('pointer-events', 'auto').on('click', () => {\n      onceTouchedRegion.current = null;\n      setRegionHighlighted({\n        stateCode: mapCode,\n        districtName: null\n      });\n    });\n  }, [mapCode, setRegionHighlighted]);\n  const path = useMemo(() => {\n    if (!geoData) return null;\n    return geoPath(geoIdentity());\n  }, [geoData]); // Choropleth\n\n  useEffect(() => {\n    if (!geoData) return;\n    const svg = select(svgRef.current);\n    const T = transition().duration(D3_TRANSITION_DURATION);\n    svg.select('.regions').selectAll('path').data(mapViz === MAP_VIZS.CHOROPLETH ? features : [], d => d.id).join(enter => enter.append('path').attr('d', path).attr('stroke-width', 1.8).attr('stroke-opacity', 0).style('cursor', 'pointer').on('mouseenter', (event, d) => {\n      if (onceTouchedRegion.current) return;\n      setRegionHighlighted({\n        stateCode: STATE_CODES[d.properties.st_nm],\n        districtName: d.properties.district\n      });\n    }).on('pointerdown', (event, d) => {\n      if (onceTouchedRegion.current === d) onceTouchedRegion.current = null;else onceTouchedRegion.current = d;\n      setRegionHighlighted({\n        stateCode: STATE_CODES[d.properties.st_nm],\n        districtName: d.properties.district\n      });\n    }).attr('fill', '#fff0').attr('stroke', '#fff0'), update => update, exit => exit.transition(T).attr('stroke', '#fff0').attr('fill', '#fff0').remove()).attr('pointer-events', 'all').on('click', (event, d) => {\n      var _data$stateCode2;\n\n      event.stopPropagation();\n      const stateCode = STATE_CODES[d.properties.st_nm];\n      if (onceTouchedRegion.current || mapMeta.mapType === MAP_TYPES.STATE || !((_data$stateCode2 = data[stateCode]) === null || _data$stateCode2 === void 0 ? void 0 : _data$stateCode2.districts)) return; // Disable pointer events till the new map is rendered\n\n      svg.attr('pointer-events', 'none');\n      svg.select('.regions').selectAll('path').attr('pointer-events', 'none'); // Switch map\n\n      history.push(`/state/${stateCode}${window.innerWidth < 769 ? '#MapExplorer' : ''}`);\n    }).call(sel => {\n      sel.transition(T).attr('fill', fillColor).attr('stroke', strokeColor.bind(this, ''));\n    });\n  }, [mapViz, data, features, fillColor, geoData, history, mapMeta.mapType, path, setRegionHighlighted, strokeColor]);\n  const sortedFeatures = useMemo(() => {\n    if (mapViz === MAP_VIZS.CHOROPLETH) {\n      return [];\n    } else {\n      return (features || []).map(feature => {\n        const stateCode = STATE_CODES[feature.properties.st_nm];\n        const districtName = feature.properties.district;\n        const stateData = data[stateCode];\n\n        if (!isDistrictView) {\n          feature.value = getMapStatistic(stateData);\n        } else {\n          var _stateData$districts3, _stateData$districts4;\n\n          const districtData = stateData === null || stateData === void 0 ? void 0 : (_stateData$districts3 = stateData.districts) === null || _stateData$districts3 === void 0 ? void 0 : _stateData$districts3[districtName];\n          if (districtName) feature.value = getMapStatistic(districtData);else feature.value = getMapStatistic(stateData === null || stateData === void 0 ? void 0 : (_stateData$districts4 = stateData.districts) === null || _stateData$districts4 === void 0 ? void 0 : _stateData$districts4[UNKNOWN_DISTRICT_KEY]);\n        }\n\n        return feature;\n      }).filter(feature => feature.value > 0).sort((featureA, featureB) => featureB.value - featureB.value);\n    }\n  }, [mapViz, isDistrictView, getMapStatistic, features, data]); // Bubble\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const T = transition().duration(D3_TRANSITION_DURATION);\n    const regionSelection = svg.select('.circles').selectAll('circle').data(mapViz === MAP_VIZS.BUBBLE ? sortedFeatures : [], feature => feature.id).join(enter => enter.append('circle').attr('transform', feature => `translate(${path.centroid(feature)})`).attr('fill-opacity', 0.25).style('cursor', 'pointer').attr('pointer-events', 'all').call(enter => {\n      enter.append('title');\n    }), update => update, exit => exit.call(exit => exit.transition(T).attr('r', 0).remove())).on('mouseenter', (event, feature) => {\n      if (onceTouchedRegion.current) return;\n      setRegionHighlighted({\n        stateCode: STATE_CODES[feature.properties.st_nm],\n        districtName: !isDistrictView ? null : feature.properties.district || UNKNOWN_DISTRICT_KEY\n      });\n    }).on('pointerdown', (event, feature) => {\n      if (onceTouchedRegion.current === feature) onceTouchedRegion.current = null;else onceTouchedRegion.current = feature;\n      setRegionHighlighted({\n        stateCode: STATE_CODES[feature.properties.st_nm],\n        districtName: !isDistrictView ? null : feature.properties.district || UNKNOWN_DISTRICT_KEY\n      });\n    }).on('click', (event, feature) => {\n      event.stopPropagation();\n      if (onceTouchedRegion.current || mapMeta.mapType === MAP_TYPES.STATE) return;\n      history.push(`/state/${STATE_CODES[feature.properties.st_nm]}${window.innerWidth < 769 ? '#MapExplorer' : ''}`);\n    }).call(sel => {\n      sel.transition(T).attr('fill', statisticConfig.color + '70').attr('stroke', statisticConfig.color + '70').attr('r', feature => mapScale(feature.value));\n    });\n    window.requestIdleCallback(() => {\n      populateTexts(regionSelection);\n    });\n  }, [mapMeta.mapType, mapViz, isDistrictView, sortedFeatures, history, mapScale, path, setRegionHighlighted, populateTexts, statisticConfig, getMapStatistic]); // Spike (Note: bad unmodular code)\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const T = transition().duration(D3_TRANSITION_DURATION);\n    const regionSelection = svg.select('.spikes').selectAll('path').data(mapViz === MAP_VIZS.SPIKE ? sortedFeatures : [], feature => feature.id, feature => feature.id).join(enter => enter.append('path').attr('transform', feature => `translate(${path.centroid(feature)})`).attr('opacity', 0).attr('fill-opacity', 0.25).style('cursor', 'pointer').attr('pointer-events', 'all').attr('d', spike(0)).call(enter => {\n      enter.append('title');\n    }), update => update, exit => exit.call(exit => exit.transition(T).attr('opacity', 0).attr('d', spike(0)).remove())).on('mouseenter', (event, feature) => {\n      if (onceTouchedRegion.current) return;\n      setRegionHighlighted({\n        stateCode: STATE_CODES[feature.properties.st_nm],\n        districtName: !isDistrictView ? null : feature.properties.district || UNKNOWN_DISTRICT_KEY\n      });\n    }).on('pointerdown', (event, feature) => {\n      if (onceTouchedRegion.current === feature) onceTouchedRegion.current = null;else onceTouchedRegion.current = feature;\n      setRegionHighlighted({\n        stateCode: STATE_CODES[feature.properties.st_nm],\n        districtName: !isDistrictView ? null : feature.properties.district || UNKNOWN_DISTRICT_KEY\n      });\n    }).on('click', (event, feature) => {\n      event.stopPropagation();\n      if (onceTouchedRegion.current || mapMeta.mapType === MAP_TYPES.STATE) return;\n      history.push(`/state/${STATE_CODES[feature.properties.st_nm]}${window.innerWidth < 769 ? '#MapExplorer' : ''}`);\n    }).call(sel => {\n      sel.transition(T).attr('opacity', 1).attr('fill', statisticConfig.color + '70').attr('stroke', statisticConfig.color + '70').attr('d', feature => spike(mapScale(feature.value)));\n    });\n    window.requestIdleCallback(() => {\n      populateTexts(regionSelection);\n    });\n  }, [mapMeta.mapType, mapViz, isDistrictView, sortedFeatures, history, mapScale, path, setRegionHighlighted, populateTexts, statisticConfig, getMapStatistic]); // Boundaries\n\n  useEffect(() => {\n    if (!geoData) return;\n    const svg = select(svgRef.current);\n    const T = transition().duration(D3_TRANSITION_DURATION);\n    let meshStates = [];\n    let meshDistricts = [];\n\n    if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n      meshStates = [mesh(geoData, geoData.objects.states)];\n      meshStates[0].id = `${mapCode}-states`;\n    }\n\n    if (mapMeta.mapType === MAP_TYPES.STATE || isDistrictView && mapViz === MAP_VIZS.CHOROPLETH) {\n      // Add id to mesh\n      meshDistricts = [mesh(geoData, geoData.objects.districts)];\n      meshDistricts[0].id = `${mapCode}-districts`;\n    }\n\n    svg.select('.state-borders').attr('fill', 'none').attr('stroke-width', 1.5).selectAll('path').data(meshStates, d => d.id).join(enter => enter.append('path').attr('d', path).attr('stroke', '#fff0'), update => update, exit => exit.transition(T).attr('stroke', '#fff0').remove()).transition(T).attr('stroke', strokeColor.bind(this, '40'));\n    svg.select('.district-borders').attr('fill', 'none').attr('stroke-width', 1.5).selectAll('path').data(meshDistricts, d => d.id).join(enter => enter.append('path').attr('d', path).attr('d', path).attr('stroke', '#fff0'), update => update, exit => exit.transition(T).attr('stroke', '#fff0').remove()).transition(T).attr('stroke', strokeColor.bind(this, '40'));\n  }, [geoData, mapMeta, mapCode, mapViz, isDistrictView, statistic, path, strokeColor]); // Highlight\n\n  useEffect(() => {\n    const stateCode = regionHighlighted.stateCode;\n    const stateName = STATE_NAMES[stateCode];\n    const district = regionHighlighted.districtName;\n    const svg = select(svgRef.current);\n\n    if (mapViz === MAP_VIZS.BUBBLE) {\n      svg.select('.circles').selectAll('circle').attr('fill-opacity', d => {\n        var _d$properties;\n\n        const highlighted = stateName === d.properties.st_nm && (!district && stateCode !== mapCode || district === ((_d$properties = d.properties) === null || _d$properties === void 0 ? void 0 : _d$properties.district) || !isDistrictView || district === UNKNOWN_DISTRICT_KEY && !d.properties.district);\n        return highlighted ? 1 : 0.25;\n      });\n    } else if (mapViz === MAP_VIZS.SPIKE) {\n      svg.select('.spikes').selectAll('path').attr('fill-opacity', d => {\n        var _d$properties2;\n\n        const highlighted = stateName === d.properties.st_nm && (!district && stateCode !== mapCode || district === ((_d$properties2 = d.properties) === null || _d$properties2 === void 0 ? void 0 : _d$properties2.district) || !isDistrictView || district === UNKNOWN_DISTRICT_KEY && !d.properties.district);\n        return highlighted ? 1 : 0.25;\n      });\n    } else {\n      svg.select('.regions').selectAll('path').each(function (d) {\n        var _d$properties3;\n\n        const highlighted = stateName === d.properties.st_nm && (!district && stateCode !== mapCode || district === ((_d$properties3 = d.properties) === null || _d$properties3 === void 0 ? void 0 : _d$properties3.district) || !isDistrictView);\n        if (highlighted) this.parentNode.appendChild(this);\n        select(this).attr('stroke-opacity', highlighted ? 1 : 0);\n      });\n    }\n  }, [geoData, data, mapCode, isDistrictView, mapViz, regionHighlighted.stateCode, regionHighlighted.districtName, statistic]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svg-parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"chart\",\n        className: classnames({\n          zone: !!(statisticConfig === null || statisticConfig === void 0 ? void 0 : (_statisticConfig$mapC = statisticConfig.mapConfig) === null || _statisticConfig$mapC === void 0 ? void 0 : _statisticConfig$mapC.colorScale)\n        }),\n        viewBox: `0 0 ${MAP_DIMENSIONS[0]} ${MAP_DIMENSIONS[1]}`,\n        preserveAspectRatio: \"xMidYMid meet\",\n        ref: svgRef,\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"regions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"state-borders\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"district-borders\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"circles\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"spikes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 17\n      }, this), noDistrictData && (statisticConfig === null || statisticConfig === void 0 ? void 0 : statisticConfig.hasPrimary) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames('disclaimer', `is-${statistic}`),\n        children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: t('District-wise data not available in state bulletin')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 13\n    }, this), mapScale && /*#__PURE__*/_jsxDEV(MapLegend, {\n      data,\n      statistic,\n      mapViz,\n      mapScale\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: 'absolute',\n        height: 0\n      },\n      children: /*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"filter\", {\n          id: \"balance-color\",\n          colorInterpolationFilters: \"sRGB\",\n          children: /*#__PURE__*/_jsxDEV(\"feColorMatrix\", {\n            type: \"matrix\",\n            values: \"0.91372549  0           0            0  0.08627451 0           0.91372549  0            0  0.08627451 0           0           0.854901961  0  0.145098039 0           0           0            1  0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MapVisualizer, \"q3rIfW6TlZzIcfqaidIgL32uNTY=\", false, function () {\n  return [useTranslation, useHistory, useSWR];\n});\n\n_c = MapVisualizer;\nexport default MapVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapVisualizer\");","map":{"version":3,"sources":["/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/d3ia/src/components/MapVisualizer.js"],"names":["MapLegend","D3_TRANSITION_DURATION","MAP_DIMENSIONS","MAP_META","MAP_TYPES","MAP_VIZS","STATE_CODES","STATE_NAMES","STATISTIC_CONFIGS","UNKNOWN_DISTRICT_KEY","formatNumber","spike","toTitleCase","AlertIcon","classnames","max","json","geoIdentity","geoPath","scaleLinear","scaleSqrt","scaleSequential","interpolateReds","interpolateBlues","interpolateGreens","interpolateGreys","interpolatePurples","interpolateOranges","interpolatePiYG","select","transition","useCallback","useEffect","useMemo","useRef","useTranslation","useHistory","useSWR","feature","mesh","colorInterpolator","statistic","t","category","MapVisualizer","mapCode","isDistrictView","mapViz","data","regionHighlighted","setRegionHighlighted","getMapStatistic","transformStatistic","noDistrictData","svgRef","mapMeta","history","geoData","geoDataFile","file","suspense","revalidateOnFocus","statisticTotal","statisticConfig","strokeColor","alpha","color","features","featuresWrap","objects","states","mapType","COUNTRY","CHOROPLETH","districts","map","district","properties","state","st_nm","obj","Object","assign","id","districtsSet","reduce","stateCodes","stateCode","Set","add","statisticMax","keys","filter","includes","districtData","res","districtName","has","push","mapScale","BUBBLE","Math","clamp","nice","SPIKE","mapConfig","colorScale","fillColor","d","stateData","n","populateTexts","regionSelection","text","nonLinear","onceTouchedRegion","svg","current","attr","on","path","T","duration","selectAll","join","enter","append","style","event","update","exit","remove","stopPropagation","STATE","window","innerWidth","call","sel","bind","sortedFeatures","value","sort","featureA","featureB","centroid","requestIdleCallback","meshStates","meshDistricts","stateName","highlighted","each","parentNode","appendChild","zone","hasPrimary","position","height"],"mappings":"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","sourcesContent":["import MapLegend from './MapLegend';\n\nimport {\n    D3_TRANSITION_DURATION,\n    MAP_DIMENSIONS,\n    MAP_META,\n    MAP_TYPES,\n    MAP_VIZS,\n    STATE_CODES,\n    STATE_NAMES,\n    STATISTIC_CONFIGS,\n    UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {formatNumber, spike, toTitleCase} from '../utils/commonFunctions';\n\nimport {AlertIcon} from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport {max} from 'd3-array';\nimport {json} from 'd3-fetch';\nimport {geoIdentity, geoPath} from 'd3-geo';\nimport {scaleLinear, scaleSqrt, scaleSequential} from 'd3-scale';\nimport {\n    interpolateReds,\n    interpolateBlues,\n    interpolateGreens,\n    interpolateGreys,\n    interpolatePurples,\n    interpolateOranges,\n    interpolatePiYG,\n} from 'd3-scale-chromatic';\nimport {select} from 'd3-selection';\nimport {transition} from 'd3-transition';\nimport {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport useSWR from 'swr';\nimport {feature, mesh} from 'topojson-client';\n\nconst colorInterpolator = (statistic) => {\n    if (statistic === 'confirmed') {\n        return (t) => interpolateReds(t * 0.85);\n    } else if (statistic === 'active') {\n        return (t) => interpolateBlues(t * 0.85);\n    } else if (statistic === 'recovered') {\n        return (t) => interpolateGreens(t * 0.85);\n    } else if (statistic === 'deceased') {\n        return (t) => interpolateGreys(t * 0.85);\n    } else if (statistic === 'tested') {\n        return (t) => interpolatePurples(t * 0.85);\n    } else if (\n        statistic === 'tpr' ||\n        statistic === 'cfr' ||\n        statistic === 'other'\n    ) {\n        return (t) => interpolateOranges(t * 0.85);\n    } else if (STATISTIC_CONFIGS[statistic]?.category === 'vaccinated') {\n        return (t) => interpolatePiYG(0.15 + 0.35 * (1 - t));\n    } else {\n        return (t) => interpolateOranges(t * 0.85);\n    }\n};\n\nfunction MapVisualizer({\n                           mapCode,\n                           isDistrictView,\n                           mapViz,\n                           data,\n                           regionHighlighted,\n                           setRegionHighlighted,\n                           statistic,\n                           getMapStatistic,\n                           transformStatistic,\n                           noDistrictData,\n                       }) {\n    const {t} = useTranslation();\n    const svgRef = useRef(null);\n\n    const mapMeta = MAP_META[mapCode];\n    const history = useHistory();\n\n    const {data: geoData} = useSWR(\n        mapMeta.geoDataFile,\n        async (file) => {\n            return await json(file);\n        },\n        {suspense: false, revalidateOnFocus: false}\n    );\n\n    const statisticTotal = useMemo(() => {\n        return getMapStatistic(data[mapCode]);\n    }, [data, mapCode, getMapStatistic]);\n\n    const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n    const strokeColor = useCallback(\n        (alpha) => (statisticConfig?.color || '#343a40') + alpha,\n        [statisticConfig]\n    );\n\n    const features = useMemo(() => {\n        if (!geoData) return null;\n\n        const featuresWrap = !isDistrictView\n            ? feature(geoData, geoData.objects.states).features\n            : mapMeta.mapType === MAP_TYPES.COUNTRY && mapViz !== MAP_VIZS.CHOROPLETH\n                ? [\n                    ...feature(geoData, geoData.objects.states).features,\n                    ...feature(geoData, geoData.objects.districts).features,\n                ]\n                : feature(geoData, geoData.objects.districts).features;\n        // Add id to each feature\n        return featuresWrap.map((feature) => {\n            const district = feature.properties.district;\n            const state = feature.properties.st_nm;\n            const obj = Object.assign({}, feature);\n            obj.id = `${mapCode}-${state}${district ? '-' + district : ''}`;\n            return obj;\n        });\n    }, [geoData, mapCode, isDistrictView, mapViz, mapMeta]);\n\n    const districtsSet = useMemo(() => {\n        if (!geoData || !isDistrictView) return {};\n        return feature(geoData, geoData.objects.districts).features.reduce(\n            (stateCodes, feature) => {\n                const stateCode = STATE_CODES[feature.properties.st_nm];\n                if (!stateCodes[stateCode]) {\n                    stateCodes[stateCode] = new Set();\n                }\n                stateCodes[stateCode].add(feature.properties.district);\n                return stateCodes;\n            },\n            {}\n        );\n    }, [geoData, isDistrictView]);\n\n    const statisticMax = useMemo(() => {\n        const stateCodes = Object.keys(data).filter(\n            (stateCode) =>\n                stateCode !== 'TT' && Object.keys(MAP_META).includes(stateCode)\n        );\n\n        if (!isDistrictView) {\n            return max(stateCodes, (stateCode) =>\n                transformStatistic(getMapStatistic(data[stateCode]))\n            );\n        } else {\n            const districtData = stateCodes.reduce((res, stateCode) => {\n                const districts = Object.keys(data[stateCode]?.districts || []).filter(\n                    (districtName) =>\n                        (districtsSet?.[stateCode] || new Set()).has(districtName) ||\n                        (mapViz !== MAP_VIZS.CHOROPLETH &&\n                            districtName === UNKNOWN_DISTRICT_KEY)\n                );\n                res.push(\n                    ...districts.map((districtName) =>\n                        transformStatistic(\n                            getMapStatistic(data[stateCode].districts[districtName])\n                        )\n                    )\n                );\n                return res;\n            }, []);\n            return max(districtData);\n        }\n    }, [\n        data,\n        isDistrictView,\n        getMapStatistic,\n        mapViz,\n        districtsSet,\n        transformStatistic,\n    ]);\n\n    const mapScale = useMemo(() => {\n        if (mapViz === MAP_VIZS.BUBBLE) {\n            // No negative values\n            return scaleSqrt([0, Math.max(1, statisticMax || 0)], [0, 40])\n                .clamp(true)\n                .nice(3);\n        } else if (mapViz === MAP_VIZS.SPIKE) {\n            return scaleLinear([0, Math.max(1, statisticMax || 0)], [0, 80])\n                .clamp(true)\n                .nice(3);\n        } else if (STATISTIC_CONFIGS[statistic]?.mapConfig?.colorScale) {\n            return STATISTIC_CONFIGS[statistic].mapConfig.colorScale;\n        } else {\n            // No negative values\n            return scaleSequential(\n                [0, Math.max(1, statisticMax || 0)],\n                colorInterpolator(statistic)\n            ).clamp(true);\n        }\n    }, [mapViz, statistic, statisticMax]);\n\n    const fillColor = useCallback(\n        (d) => {\n            if (mapViz === MAP_VIZS.CHOROPLETH) {\n                const stateCode = STATE_CODES[d.properties.st_nm];\n                const district = d.properties.district;\n                const stateData = data[stateCode];\n                const districtData = stateData?.districts?.[district];\n                const n = transformStatistic(\n                    getMapStatistic(district ? districtData : stateData)\n                );\n                const color = n ? mapScale(n) : '#ffffff00';\n                return color;\n            }\n        },\n        [mapViz, data, mapScale, getMapStatistic, transformStatistic]\n    );\n\n    const populateTexts = useCallback(\n        (regionSelection) => {\n            regionSelection.select('title').text((d) => {\n                if (mapViz !== MAP_VIZS.CHOROPLETH && !statisticConfig?.nonLinear) {\n                    const state = d.properties.st_nm;\n                    const stateCode = STATE_CODES[state];\n                    const district = d.properties.district;\n\n                    const stateData = data[stateCode];\n                    const districtData = stateData?.districts?.[district];\n                    let n;\n                    if (district) n = getMapStatistic(districtData);\n                    else n = getMapStatistic(stateData);\n                    return `${formatNumber(\n                        100 * (n / (statisticTotal || 0.001)),\n                        '%'\n                    )} from ${toTitleCase(district ? district : state)}`;\n                }\n            });\n        },\n        [mapViz, data, getMapStatistic, statisticTotal, statisticConfig]\n    );\n\n    const onceTouchedRegion = useRef(null);\n\n    // Reset on tapping outside map\n    useEffect(() => {\n        const svg = select(svgRef.current);\n\n        svg.attr('pointer-events', 'auto').on('click', () => {\n            onceTouchedRegion.current = null;\n            setRegionHighlighted({\n                stateCode: mapCode,\n                districtName: null,\n            });\n        });\n    }, [mapCode, setRegionHighlighted]);\n\n    const path = useMemo(() => {\n        if (!geoData) return null;\n        return geoPath(geoIdentity());\n    }, [geoData]);\n\n    // Choropleth\n    useEffect(() => {\n        if (!geoData) return;\n        const svg = select(svgRef.current);\n        const T = transition().duration(D3_TRANSITION_DURATION);\n\n        svg\n            .select('.regions')\n            .selectAll('path')\n            .data(mapViz === MAP_VIZS.CHOROPLETH ? features : [], (d) => d.id)\n            .join(\n                (enter) =>\n                    enter\n                        .append('path')\n                        .attr('d', path)\n                        .attr('stroke-width', 1.8)\n                        .attr('stroke-opacity', 0)\n                        .style('cursor', 'pointer')\n                        .on('mouseenter', (event, d) => {\n                            if (onceTouchedRegion.current) return;\n                            setRegionHighlighted({\n                                stateCode: STATE_CODES[d.properties.st_nm],\n                                districtName: d.properties.district,\n                            });\n                        })\n                        .on('pointerdown', (event, d) => {\n                            if (onceTouchedRegion.current === d)\n                                onceTouchedRegion.current = null;\n                            else onceTouchedRegion.current = d;\n                            setRegionHighlighted({\n                                stateCode: STATE_CODES[d.properties.st_nm],\n                                districtName: d.properties.district,\n                            });\n                        })\n                        .attr('fill', '#fff0')\n                        .attr('stroke', '#fff0'),\n                (update) => update,\n                (exit) =>\n                    exit\n                        .transition(T)\n                        .attr('stroke', '#fff0')\n                        .attr('fill', '#fff0')\n                        .remove()\n            )\n            .attr('pointer-events', 'all')\n            .on('click', (event, d) => {\n                event.stopPropagation();\n                const stateCode = STATE_CODES[d.properties.st_nm];\n                if (\n                    onceTouchedRegion.current ||\n                    mapMeta.mapType === MAP_TYPES.STATE ||\n                    !data[stateCode]?.districts\n                )\n                    return;\n                // Disable pointer events till the new map is rendered\n                svg.attr('pointer-events', 'none');\n                svg.select('.regions').selectAll('path').attr('pointer-events', 'none');\n                // Switch map\n                history.push(\n                    `/state/${stateCode}${window.innerWidth < 769 ? '#MapExplorer' : ''}`\n                );\n            })\n            .call((sel) => {\n                sel\n                    .transition(T)\n                    .attr('fill', fillColor)\n                    .attr('stroke', strokeColor.bind(this, ''));\n            });\n    }, [\n        mapViz,\n        data,\n        features,\n        fillColor,\n        geoData,\n        history,\n        mapMeta.mapType,\n        path,\n        setRegionHighlighted,\n        strokeColor,\n    ]);\n\n    const sortedFeatures = useMemo(() => {\n        if (mapViz === MAP_VIZS.CHOROPLETH) {\n            return [];\n        } else {\n            return (features || [])\n                .map((feature) => {\n                    const stateCode = STATE_CODES[feature.properties.st_nm];\n                    const districtName = feature.properties.district;\n                    const stateData = data[stateCode];\n\n                    if (!isDistrictView) {\n                        feature.value = getMapStatistic(stateData);\n                    } else {\n                        const districtData = stateData?.districts?.[districtName];\n\n                        if (districtName) feature.value = getMapStatistic(districtData);\n                        else\n                            feature.value = getMapStatistic(\n                                stateData?.districts?.[UNKNOWN_DISTRICT_KEY]\n                            );\n                    }\n\n                    return feature;\n                })\n                .filter((feature) => feature.value > 0)\n                .sort((featureA, featureB) => featureB.value - featureB.value);\n        }\n    }, [mapViz, isDistrictView, getMapStatistic, features, data]);\n\n    // Bubble\n    useEffect(() => {\n        const svg = select(svgRef.current);\n        const T = transition().duration(D3_TRANSITION_DURATION);\n\n        const regionSelection = svg\n            .select('.circles')\n            .selectAll('circle')\n            .data(\n                mapViz === MAP_VIZS.BUBBLE ? sortedFeatures : [],\n                (feature) => feature.id\n            )\n            .join(\n                (enter) =>\n                    enter\n                        .append('circle')\n                        .attr(\n                            'transform',\n                            (feature) => `translate(${path.centroid(feature)})`\n                        )\n                        .attr('fill-opacity', 0.25)\n                        .style('cursor', 'pointer')\n                        .attr('pointer-events', 'all')\n                        .call((enter) => {\n                            enter.append('title');\n                        }),\n                (update) => update,\n                (exit) => exit.call((exit) => exit.transition(T).attr('r', 0).remove())\n            )\n            .on('mouseenter', (event, feature) => {\n                if (onceTouchedRegion.current) return;\n                setRegionHighlighted({\n                    stateCode: STATE_CODES[feature.properties.st_nm],\n                    districtName: !isDistrictView\n                        ? null\n                        : feature.properties.district || UNKNOWN_DISTRICT_KEY,\n                });\n            })\n            .on('pointerdown', (event, feature) => {\n                if (onceTouchedRegion.current === feature)\n                    onceTouchedRegion.current = null;\n                else onceTouchedRegion.current = feature;\n                setRegionHighlighted({\n                    stateCode: STATE_CODES[feature.properties.st_nm],\n                    districtName: !isDistrictView\n                        ? null\n                        : feature.properties.district || UNKNOWN_DISTRICT_KEY,\n                });\n            })\n            .on('click', (event, feature) => {\n                event.stopPropagation();\n                if (onceTouchedRegion.current || mapMeta.mapType === MAP_TYPES.STATE)\n                    return;\n                history.push(\n                    `/state/${STATE_CODES[feature.properties.st_nm]}${\n                        window.innerWidth < 769 ? '#MapExplorer' : ''\n                    }`\n                );\n            })\n            .call((sel) => {\n                sel\n                    .transition(T)\n                    .attr('fill', statisticConfig.color + '70')\n                    .attr('stroke', statisticConfig.color + '70')\n                    .attr('r', (feature) => mapScale(feature.value));\n            });\n\n        window.requestIdleCallback(() => {\n            populateTexts(regionSelection);\n        });\n    }, [\n        mapMeta.mapType,\n        mapViz,\n        isDistrictView,\n        sortedFeatures,\n        history,\n        mapScale,\n        path,\n        setRegionHighlighted,\n        populateTexts,\n        statisticConfig,\n        getMapStatistic,\n    ]);\n\n    // Spike (Note: bad unmodular code)\n    useEffect(() => {\n        const svg = select(svgRef.current);\n        const T = transition().duration(D3_TRANSITION_DURATION);\n\n        const regionSelection = svg\n            .select('.spikes')\n            .selectAll('path')\n            .data(\n                mapViz === MAP_VIZS.SPIKE ? sortedFeatures : [],\n                (feature) => feature.id,\n                (feature) => feature.id\n            )\n            .join(\n                (enter) =>\n                    enter\n                        .append('path')\n                        .attr(\n                            'transform',\n                            (feature) => `translate(${path.centroid(feature)})`\n                        )\n                        .attr('opacity', 0)\n                        .attr('fill-opacity', 0.25)\n                        .style('cursor', 'pointer')\n                        .attr('pointer-events', 'all')\n                        .attr('d', spike(0))\n                        .call((enter) => {\n                            enter.append('title');\n                        }),\n                (update) => update,\n                (exit) =>\n                    exit.call((exit) =>\n                        exit.transition(T).attr('opacity', 0).attr('d', spike(0)).remove()\n                    )\n            )\n            .on('mouseenter', (event, feature) => {\n                if (onceTouchedRegion.current) return;\n                setRegionHighlighted({\n                    stateCode: STATE_CODES[feature.properties.st_nm],\n                    districtName: !isDistrictView\n                        ? null\n                        : feature.properties.district || UNKNOWN_DISTRICT_KEY,\n                });\n            })\n            .on('pointerdown', (event, feature) => {\n                if (onceTouchedRegion.current === feature)\n                    onceTouchedRegion.current = null;\n                else onceTouchedRegion.current = feature;\n                setRegionHighlighted({\n                    stateCode: STATE_CODES[feature.properties.st_nm],\n                    districtName: !isDistrictView\n                        ? null\n                        : feature.properties.district || UNKNOWN_DISTRICT_KEY,\n                });\n            })\n            .on('click', (event, feature) => {\n                event.stopPropagation();\n                if (onceTouchedRegion.current || mapMeta.mapType === MAP_TYPES.STATE)\n                    return;\n                history.push(\n                    `/state/${STATE_CODES[feature.properties.st_nm]}${\n                        window.innerWidth < 769 ? '#MapExplorer' : ''\n                    }`\n                );\n            })\n            .call((sel) => {\n                sel\n                    .transition(T)\n                    .attr('opacity', 1)\n                    .attr('fill', statisticConfig.color + '70')\n                    .attr('stroke', statisticConfig.color + '70')\n                    .attr('d', (feature) => spike(mapScale(feature.value)));\n            });\n\n        window.requestIdleCallback(() => {\n            populateTexts(regionSelection);\n        });\n    }, [\n        mapMeta.mapType,\n        mapViz,\n        isDistrictView,\n        sortedFeatures,\n        history,\n        mapScale,\n        path,\n        setRegionHighlighted,\n        populateTexts,\n        statisticConfig,\n        getMapStatistic,\n    ]);\n\n    // Boundaries\n    useEffect(() => {\n        if (!geoData) return;\n        const svg = select(svgRef.current);\n        const T = transition().duration(D3_TRANSITION_DURATION);\n\n        let meshStates = [];\n        let meshDistricts = [];\n\n        if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n            meshStates = [mesh(geoData, geoData.objects.states)];\n            meshStates[0].id = `${mapCode}-states`;\n        }\n\n        if (\n            mapMeta.mapType === MAP_TYPES.STATE ||\n            (isDistrictView && mapViz === MAP_VIZS.CHOROPLETH)\n        ) {\n            // Add id to mesh\n            meshDistricts = [mesh(geoData, geoData.objects.districts)];\n            meshDistricts[0].id = `${mapCode}-districts`;\n        }\n\n        svg\n            .select('.state-borders')\n            .attr('fill', 'none')\n            .attr('stroke-width', 1.5)\n            .selectAll('path')\n            .data(meshStates, (d) => d.id)\n            .join(\n                (enter) => enter.append('path').attr('d', path).attr('stroke', '#fff0'),\n                (update) => update,\n                (exit) => exit.transition(T).attr('stroke', '#fff0').remove()\n            )\n            .transition(T)\n            .attr('stroke', strokeColor.bind(this, '40'));\n\n        svg\n            .select('.district-borders')\n            .attr('fill', 'none')\n            .attr('stroke-width', 1.5)\n            .selectAll('path')\n            .data(meshDistricts, (d) => d.id)\n            .join(\n                (enter) =>\n                    enter\n                        .append('path')\n                        .attr('d', path)\n                        .attr('d', path)\n                        .attr('stroke', '#fff0'),\n                (update) => update,\n                (exit) => exit.transition(T).attr('stroke', '#fff0').remove()\n            )\n            .transition(T)\n            .attr('stroke', strokeColor.bind(this, '40'));\n    }, [\n        geoData,\n        mapMeta,\n        mapCode,\n        mapViz,\n        isDistrictView,\n        statistic,\n        path,\n        strokeColor,\n    ]);\n\n    // Highlight\n    useEffect(() => {\n        const stateCode = regionHighlighted.stateCode;\n        const stateName = STATE_NAMES[stateCode];\n        const district = regionHighlighted.districtName;\n\n        const svg = select(svgRef.current);\n\n        if (mapViz === MAP_VIZS.BUBBLE) {\n            svg\n                .select('.circles')\n                .selectAll('circle')\n                .attr('fill-opacity', (d) => {\n                    const highlighted =\n                        stateName === d.properties.st_nm &&\n                        ((!district && stateCode !== mapCode) ||\n                            district === d.properties?.district ||\n                            !isDistrictView ||\n                            (district === UNKNOWN_DISTRICT_KEY && !d.properties.district));\n                    return highlighted ? 1 : 0.25;\n                });\n        } else if (mapViz === MAP_VIZS.SPIKE) {\n            svg\n                .select('.spikes')\n                .selectAll('path')\n                .attr('fill-opacity', (d) => {\n                    const highlighted =\n                        stateName === d.properties.st_nm &&\n                        ((!district && stateCode !== mapCode) ||\n                            district === d.properties?.district ||\n                            !isDistrictView ||\n                            (district === UNKNOWN_DISTRICT_KEY && !d.properties.district));\n                    return highlighted ? 1 : 0.25;\n                });\n        } else {\n            svg\n                .select('.regions')\n                .selectAll('path')\n                .each(function (d) {\n                    const highlighted =\n                        stateName === d.properties.st_nm &&\n                        ((!district && stateCode !== mapCode) ||\n                            district === d.properties?.district ||\n                            !isDistrictView);\n                    if (highlighted) this.parentNode.appendChild(this);\n                    select(this).attr('stroke-opacity', highlighted ? 1 : 0);\n                });\n        }\n    }, [\n        geoData,\n        data,\n        mapCode,\n        isDistrictView,\n        mapViz,\n        regionHighlighted.stateCode,\n        regionHighlighted.districtName,\n        statistic,\n    ]);\n\n    return (\n        <>\n            <div className=\"svg-parent\">\n                <svg\n                    id=\"chart\"\n                    className={classnames({\n                        zone: !!statisticConfig?.mapConfig?.colorScale,\n                    })}\n                    viewBox={`0 0 ${MAP_DIMENSIONS[0]} ${MAP_DIMENSIONS[1]}`}\n                    preserveAspectRatio=\"xMidYMid meet\"\n                    ref={svgRef}\n                >\n                    <g className=\"regions\" />\n                    <g className=\"state-borders\" />\n                    <g className=\"district-borders\" />\n                    <g className=\"circles\" />\n                    <g className=\"spikes\" />\n                </svg>\n                {noDistrictData && statisticConfig?.hasPrimary && (\n                    <div className={classnames('disclaimer', `is-${statistic}`)}>\n                        <AlertIcon />\n                        <span>\n              {t('District-wise data not available in state bulletin')}\n            </span>\n                    </div>\n                )}\n            </div>\n\n            {mapScale && <MapLegend {...{data, statistic, mapViz, mapScale}} />}\n\n            <svg style={{position: 'absolute', height: 0}}>\n                <defs>\n                    <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\n                        <feColorMatrix\n                            type=\"matrix\"\n                            values=\"0.91372549  0           0            0  0.08627451\n                      0           0.91372549  0            0  0.08627451\n                      0           0           0.854901961  0  0.145098039\n                      0           0           0            1  0\"\n                        />\n                    </filter>\n                </defs>\n            </svg>\n        </>\n    );\n}\n\nexport default MapVisualizer;\n"]},"metadata":{},"sourceType":"module"}
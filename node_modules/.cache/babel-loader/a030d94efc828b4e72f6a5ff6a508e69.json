{"ast":null,"code":"import _slicedToArray from\"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import ActionsPanel from\"./ActionsPanel\";import{API_DOMAIN,API_REFRESH_INTERVAL}from\"../constants\";import{fetcher,formatDateObjSaudia,parseSaudiaDate,retry}from\"../utils/commonFunctions\";import{max}from\"date-fns\";import equal from\"fast-deep-equal\";import{memo,useEffect,useMemo,useState,lazy,Suspense}from\"react\";import{useLocalStorage}from\"react-use\";import useSWR from\"swr\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Updates=/*#__PURE__*/lazy(function(){return retry(function(){return import(\"./Updates\");});});var Actions=function Actions(_ref){var date=_ref.date,setDate=_ref.setDate,dates=_ref.dates,lastUpdatedDate=_ref.lastUpdatedDate;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showUpdates=_useState2[0],setShowUpdates=_useState2[1];var _useLocalStorage=useLocalStorage(\"newUpdate\",false),_useLocalStorage2=_slicedToArray(_useLocalStorage,2),newUpdate=_useLocalStorage2[0],setNewUpdate=_useLocalStorage2[1];var _useLocalStorage3=useLocalStorage(\"lastViewedLog\",0),_useLocalStorage4=_slicedToArray(_useLocalStorage3,2),lastViewedLog=_useLocalStorage4[0],setLastViewedLog=_useLocalStorage4[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isTimelineMode=_useState4[0],setIsTimelineMode=_useState4[1];var _useSWR=useSWR(\"\".concat(API_DOMAIN,\"/updatelog/log.json\"),fetcher,{refreshInterval:API_REFRESH_INTERVAL}),updates=_useSWR.data;useEffect(function(){if(updates!==undefined){var lastTimestamp=updates.slice().reverse()[0].timestamp*1000;if(lastTimestamp!==lastViewedLog){setNewUpdate(true);setLastViewedLog(lastTimestamp);}}},[lastViewedLog,updates,setLastViewedLog,setNewUpdate]);var maxLastUpdatedDate=useMemo(function(){return formatDateObjSaudia(max([lastViewedLog,lastUpdatedDate].filter(function(date){return date;}).map(function(date){return parseSaudiaDate(date);})));},[lastViewedLog,lastUpdatedDate]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(ActionsPanel,{lastUpdatedDate:maxLastUpdatedDate,newUpdate:newUpdate,isTimelineMode:isTimelineMode,setIsTimelineMode:setIsTimelineMode,showUpdates:showUpdates,date:date,setDate:setDate,dates:dates,setNewUpdate:setNewUpdate,setShowUpdates:setShowUpdates}),showUpdates&&/*#__PURE__*/_jsx(Suspense,{fallback:/*#__PURE__*/_jsx(\"div\",{}),children:/*#__PURE__*/_jsx(Updates,{updates:updates})})]});};var isEqual=function isEqual(prevProps,currProps){if(!equal(currProps.date,prevProps.date)){return false;}else if(!equal(currProps.lastUpdatedDate,prevProps.lastUpdatedDate)){return false;}else if(!equal(currProps.dates,prevProps.dates)){return false;}return true;};export default/*#__PURE__*/memo(Actions,isEqual);","map":{"version":3,"sources":["/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/src/components/Actions.js"],"names":["ActionsPanel","API_DOMAIN","API_REFRESH_INTERVAL","fetcher","formatDateObjSaudia","parseSaudiaDate","retry","max","equal","memo","useEffect","useMemo","useState","lazy","Suspense","useLocalStorage","useSWR","Updates","Actions","date","setDate","dates","lastUpdatedDate","showUpdates","setShowUpdates","newUpdate","setNewUpdate","lastViewedLog","setLastViewedLog","isTimelineMode","setIsTimelineMode","refreshInterval","updates","data","undefined","lastTimestamp","slice","reverse","timestamp","maxLastUpdatedDate","filter","map","isEqual","prevProps","currProps"],"mappings":"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","sourcesContent":["import ActionsPanel from \"./ActionsPanel\";\n\nimport { API_DOMAIN, API_REFRESH_INTERVAL } from \"../constants\";\nimport {\n  fetcher,\n  formatDateObjSaudia,\n  parseSaudiaDate,\n  retry,\n} from \"../utils/commonFunctions\";\n\nimport { max } from \"date-fns\";\nimport equal from \"fast-deep-equal\";\nimport { memo, useEffect, useMemo, useState, lazy, Suspense } from \"react\";\nimport { useLocalStorage } from \"react-use\";\nimport useSWR from \"swr\";\n\nconst Updates = lazy(() => retry(() => import(\"./Updates\")));\n\nconst Actions = ({ date, setDate, dates, lastUpdatedDate }) => {\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [newUpdate, setNewUpdate] = useLocalStorage(\"newUpdate\", false);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage(\"lastViewedLog\", 0);\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\n\n  const { data: updates } = useSWR(\n    `${API_DOMAIN}/updatelog/log.json`,\n    fetcher,\n    {\n      refreshInterval: API_REFRESH_INTERVAL,\n    }\n  );\n\n  useEffect(() => {\n    if (updates !== undefined) {\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\n      if (lastTimestamp !== lastViewedLog) {\n        setNewUpdate(true);\n        setLastViewedLog(lastTimestamp);\n      }\n    }\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\n\n  const maxLastUpdatedDate = useMemo(() => {\n    return formatDateObjSaudia(\n      max(\n        [lastViewedLog, lastUpdatedDate]\n          .filter((date) => date)\n          .map((date) => parseSaudiaDate(date))\n      )\n    );\n  }, [lastViewedLog, lastUpdatedDate]);\n\n  return (\n    <>\n      <ActionsPanel\n        {...{\n          lastUpdatedDate: maxLastUpdatedDate,\n          newUpdate,\n          isTimelineMode,\n          setIsTimelineMode,\n          showUpdates,\n          date,\n          setDate,\n          dates,\n          setNewUpdate,\n          setShowUpdates,\n        }}\n      />\n\n      {showUpdates && (\n        <Suspense fallback={<div />}>\n          <Updates {...{ updates }} />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.lastUpdatedDate, prevProps.lastUpdatedDate)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Actions, isEqual);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/d3ia/src/components/Navbar.js\",\n    _s = $RefreshSig$();\n\n// import {\n//   SLIDE_IN,\n//   SLIDE_OUT,\n//   SLIDE_IN_MOBILE,\n//   SLIDE_OUT_MOBILE,\n// } from \"../animations\";\n// import locales from '../i18n/locales.json';\nimport { useState } from \"react\";\nimport { Home } from \"react-feather\"; // import { useTranslation } from \"react-i18next\";\n\nimport { Link } from \"react-router-dom\";\nimport { useTransition, animated } from \"react-spring\";\nimport { useLockBodyScroll, usePageLeave } from \"react-use\"; // import useDarkMode from \"use-dark-mode\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Navbar({\n  pages,\n  showLanguageSwitcher,\n  setShowLanguageSwitcher\n}) {\n  _s();\n\n  // const {i18n, t} = useTranslation();\n  // const currentLanguage = Object.keys(locales).includes(i18n?.language)\n  //     ? i18n?.language\n  //     : i18n?.options?.fallbackLng[0];\n  const [expand, setExpand] = useState(false); // const darkMode = useDarkMode(false);\n\n  useLockBodyScroll(expand); // const windowSize = useWindowSize();\n\n  usePageLeave(() => setExpand(false));\n  const navbarTransition = useTransition(true, {\n    from: {\n      opacity: 0\n    },\n    enter: {\n      opacity: 1\n    }\n  }); // const expandTransition = useTransition(expand, {\n  //   from: windowSize.width < 769 ? SLIDE_IN_MOBILE : SLIDE_IN,\n  //   enter: windowSize.width < 769 ? SLIDE_OUT_MOBILE : SLIDE_OUT,\n  //   leave: windowSize.width < 769 ? SLIDE_IN_MOBILE : SLIDE_IN,\n  //   config: { mass: 1, tension: 210, friction: 26 },\n  // });\n  // const handleMouseEnter = useCallback(() => {\n  //   if (windowSize.width >= 769) {\n  //     setExpand(true);\n  //   }\n  // }, [windowSize.width]);\n  // const handleLanguageSwitcher = useCallback(() => {\n  //   if (expand) setExpand(false);\n  //   setShowLanguageSwitcher(!showLanguageSwitcher);\n  // }, [expand, showLanguageSwitcher, setExpand, setShowLanguageSwitcher]);\n\n  return navbarTransition((style, item) => /*#__PURE__*/_jsxDEV(animated.div, {\n    className: \"Navbar\",\n    style,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-left\",\n      onClick: handleLanguageSwitcher,\n      children: locales[currentLanguage]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-middle\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        onClick: setExpand.bind(this, false),\n        children: [\"Covid19\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"India\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-right\",\n      onMouseEnter: handleMouseEnter,\n      ...(windowSize.width < 769 && {\n        onClick: setExpand.bind(this, !expand)\n      }),\n      children: [windowSize.width < 769 && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: expand ? t(\"Close\") : t(\"Menu\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), windowSize.width >= 769 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(Home, { ...activeNavIcon(\"/\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this));\n} // function Expand({ pages, setExpand, darkMode, windowSize }) {\n//   const expandElement = useRef(null);\n//   const { t } = useTranslation();\n//\n//   const handleMouseLeave = useCallback(() => {\n//     windowSize.width >= 769 && setExpand(false);\n//   }, [setExpand, windowSize.width]);\n//\n//   return (\n//     <div className=\"expand\" ref={expandElement} onMouseLeave={handleMouseLeave}>\n//       {pages.map((page, i) => {\n//         if (page.showInNavbar === true) {\n//           return (\n//             <Link\n//               to={page.pageLink}\n//               key={i}\n//               {...(windowSize.width < 769 && {\n//                 onClick: setExpand.bind(this, false),\n//               })}\n//             >\n//               <span\n//                 {...navLinkProps(page.pageLink, page.animationDelayForNavbar)}\n//               >\n//                 {t(page.displayName)}\n//               </span>\n//             </Link>\n//           );\n//         }\n//         return null;\n//       })}\n//\n//       {windowSize.width < 769 && <SunMoon {...{ darkMode }} />}\n//\n//       <div className=\"expand-bottom\">\n//         <h5>{t(\"A crowdsourced initiative.\")}</h5>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n_s(Navbar, \"5FPcX31L24DtzODjj+OnyVAlxvA=\", false, function () {\n  return [useLockBodyScroll, usePageLeave, useTransition];\n});\n\n_c = Navbar;\nexport default Navbar; // const navLinkProps = (path, animationDelay) => ({\n//   className: `${window.location.pathname === path ? \"focused\" : \"\"}`,\n// });\n// const activeNavIcon = (path) => ({\n//   style: {\n//     stroke: window.location.pathname === path ? \"#4c75f2\" : \"\",\n//   },\n// });\n// const SunMoon = ({ darkMode }) => {\n//   return (\n//     <div className=\"SunMoon\" onClick={darkMode.toggle}>\n//       <div>{darkMode.value ? <Sun color={\"#ffc107\"} /> : <Moon />}</div>\n//     </div>\n//   );\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/d3ia/src/components/Navbar.js"],"names":["useState","Home","Link","useTransition","animated","useLockBodyScroll","usePageLeave","Navbar","pages","showLanguageSwitcher","setShowLanguageSwitcher","expand","setExpand","navbarTransition","from","opacity","enter","style","item","handleLanguageSwitcher","locales","currentLanguage","bind","handleMouseEnter","windowSize","width","onClick","t","activeNavIcon"],"mappings":"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","sourcesContent":["// import {\n//   SLIDE_IN,\n//   SLIDE_OUT,\n//   SLIDE_IN_MOBILE,\n//   SLIDE_OUT_MOBILE,\n// } from \"../animations\";\n// import locales from '../i18n/locales.json';\n\nimport { useState } from \"react\";\nimport { Home } from \"react-feather\";\n// import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useTransition, animated } from \"react-spring\";\nimport { useLockBodyScroll, usePageLeave } from \"react-use\";\n// import useDarkMode from \"use-dark-mode\";\n\nfunction Navbar({ pages, showLanguageSwitcher, setShowLanguageSwitcher }) {\n  // const {i18n, t} = useTranslation();\n  // const currentLanguage = Object.keys(locales).includes(i18n?.language)\n  //     ? i18n?.language\n  //     : i18n?.options?.fallbackLng[0];\n\n  const [expand, setExpand] = useState(false);\n  // const darkMode = useDarkMode(false);\n\n  useLockBodyScroll(expand);\n  // const windowSize = useWindowSize();\n\n  usePageLeave(() => setExpand(false));\n\n  const navbarTransition = useTransition(true, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n  });\n\n  // const expandTransition = useTransition(expand, {\n  //   from: windowSize.width < 769 ? SLIDE_IN_MOBILE : SLIDE_IN,\n  //   enter: windowSize.width < 769 ? SLIDE_OUT_MOBILE : SLIDE_OUT,\n  //   leave: windowSize.width < 769 ? SLIDE_IN_MOBILE : SLIDE_IN,\n  //   config: { mass: 1, tension: 210, friction: 26 },\n  // });\n\n  // const handleMouseEnter = useCallback(() => {\n  //   if (windowSize.width >= 769) {\n  //     setExpand(true);\n  //   }\n  // }, [windowSize.width]);\n\n  // const handleLanguageSwitcher = useCallback(() => {\n  //   if (expand) setExpand(false);\n  //   setShowLanguageSwitcher(!showLanguageSwitcher);\n  // }, [expand, showLanguageSwitcher, setExpand, setShowLanguageSwitcher]);\n\n  return navbarTransition((style, item) => (\n    <animated.div className=\"Navbar\" {...{ style }}>\n      <div className=\"navbar-left\" onClick={handleLanguageSwitcher}>\n        {locales[currentLanguage]}\n      </div>\n\n      <div className=\"navbar-middle\">\n        <Link to=\"/\" onClick={setExpand.bind(this, false)}>\n          Covid19<span>India</span>\n        </Link>\n      </div>\n\n      <div\n        className=\"navbar-right\"\n        onMouseEnter={handleMouseEnter}\n        {...(windowSize.width < 769 && {\n          onClick: setExpand.bind(this, !expand),\n        })}\n      >\n        {windowSize.width < 769 && (\n          <span>{expand ? t(\"Close\") : t(\"Menu\")}</span>\n        )}\n\n        {windowSize.width >= 769 && (\n          <>\n            <Link to=\"/\">\n              <span>\n                <Home {...activeNavIcon(\"/\")} />\n              </span>\n            </Link>\n          </>\n        )}\n      </div>\n    </animated.div>\n  ));\n}\n\n// function Expand({ pages, setExpand, darkMode, windowSize }) {\n//   const expandElement = useRef(null);\n//   const { t } = useTranslation();\n//\n//   const handleMouseLeave = useCallback(() => {\n//     windowSize.width >= 769 && setExpand(false);\n//   }, [setExpand, windowSize.width]);\n//\n//   return (\n//     <div className=\"expand\" ref={expandElement} onMouseLeave={handleMouseLeave}>\n//       {pages.map((page, i) => {\n//         if (page.showInNavbar === true) {\n//           return (\n//             <Link\n//               to={page.pageLink}\n//               key={i}\n//               {...(windowSize.width < 769 && {\n//                 onClick: setExpand.bind(this, false),\n//               })}\n//             >\n//               <span\n//                 {...navLinkProps(page.pageLink, page.animationDelayForNavbar)}\n//               >\n//                 {t(page.displayName)}\n//               </span>\n//             </Link>\n//           );\n//         }\n//         return null;\n//       })}\n//\n//       {windowSize.width < 769 && <SunMoon {...{ darkMode }} />}\n//\n//       <div className=\"expand-bottom\">\n//         <h5>{t(\"A crowdsourced initiative.\")}</h5>\n//       </div>\n//     </div>\n//   );\n// }\n\nexport default Navbar;\n\n// const navLinkProps = (path, animationDelay) => ({\n//   className: `${window.location.pathname === path ? \"focused\" : \"\"}`,\n// });\n\n// const activeNavIcon = (path) => ({\n//   style: {\n//     stroke: window.location.pathname === path ? \"#4c75f2\" : \"\",\n//   },\n// });\n\n// const SunMoon = ({ darkMode }) => {\n//   return (\n//     <div className=\"SunMoon\" onClick={darkMode.toggle}>\n//       <div>{darkMode.value ? <Sun color={\"#ffc107\"} /> : <Moon />}</div>\n//     </div>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}
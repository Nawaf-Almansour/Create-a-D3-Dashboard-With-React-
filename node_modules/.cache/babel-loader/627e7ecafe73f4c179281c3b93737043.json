{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import {\n//   SLIDE_IN,\n//   SLIDE_OUT,\n//   SLIDE_IN_MOBILE,\n//   SLIDE_OUT_MOBILE,\n// } from \"../animations\";\n// import locales from '../i18n/locales.json';\nimport { useState } from \"react\"; // import { Book, HelpCircle, Home, Moon, Sun } from \"react-feather\";\n// import { useTranslation } from \"react-i18next\";\n// import { Link } from \"react-router-dom\";\n// import { useTransition, animated } from \"react-spring\";\n\nimport { useLockBodyScroll, usePageLeave } from \"react-use\"; // import useDarkMode from \"use-dark-mode\";\n\nfunction Navbar({\n  pages,\n  showLanguageSwitcher,\n  setShowLanguageSwitcher\n}) {\n  _s();\n\n  // const {i18n, t} = useTranslation();\n  // const currentLanguage = Object.keys(locales).includes(i18n?.language)\n  //     ? i18n?.language\n  //     : i18n?.options?.fallbackLng[0];\n  const [expand, setExpand] = useState(false); // const darkMode = useDarkMode(false);\n\n  useLockBodyScroll(expand); // const windowSize = useWindowSize();\n\n  usePageLeave(() => setExpand(false)); // const navbarTransition = useTransition(true, {\n  //   from: { opacity: 0 },\n  //   enter: { opacity: 1 },\n  // });\n  // const expandTransition = useTransition(expand, {\n  //   from: windowSize.width < 769 ? SLIDE_IN_MOBILE : SLIDE_IN,\n  //   enter: windowSize.width < 769 ? SLIDE_OUT_MOBILE : SLIDE_OUT,\n  //   leave: windowSize.width < 769 ? SLIDE_IN_MOBILE : SLIDE_IN,\n  //   config: { mass: 1, tension: 210, friction: 26 },\n  // });\n  // const handleMouseEnter = useCallback(() => {\n  //   if (windowSize.width >= 769) {\n  //     setExpand(true);\n  //   }\n  // }, [windowSize.width]);\n  // const handleLanguageSwitcher = useCallback(() => {\n  //   if (expand) setExpand(false);\n  //   setShowLanguageSwitcher(!showLanguageSwitcher);\n  // }, [expand, showLanguageSwitcher, setExpand, setShowLanguageSwitcher]);\n  // return navbarTransition((style, item) => (\n  //   <animated.div className=\"Navbar\" {...{ style }}>\n  //     <div className=\"navbar-left\" onClick={handleLanguageSwitcher}>\n  //       {locales[currentLanguage]}\n  //     </div>\n  //\n  //     <div className=\"navbar-middle\">\n  //       <Link to=\"/\" onClick={setExpand.bind(this, false)}>\n  //         Covid19<span>India</span>\n  //       </Link>\n  //     </div>\n  //\n  //     <div\n  //       className=\"navbar-right\"\n  //       onMouseEnter={handleMouseEnter}\n  //       {...(windowSize.width < 769 && {\n  //         onClick: setExpand.bind(this, !expand),\n  //       })}\n  //     >\n  //       {windowSize.width < 769 && (\n  //         <span>{expand ? t(\"Close\") : t(\"Menu\")}</span>\n  //       )}\n  //\n  //       {windowSize.width >= 769 && (\n  //         <>\n  //           <Link to=\"/\">\n  //             <span>\n  //               <Home {...activeNavIcon(\"/\")} />\n  //             </span>\n  //           </Link>\n  //           <Link to=\"/blog\">\n  //             <span>\n  //               <Book {...activeNavIcon(\"/blog\")} />\n  //             </span>\n  //           </Link>\n  //           <Link to=\"/about\">\n  //             <span>\n  //               <HelpCircle {...activeNavIcon(\"/about\")} />\n  //             </span>\n  //           </Link>\n  //           <span>\n  //             <SunMoon {...{ darkMode }} />\n  //           </span>\n  //         </>\n  //       )}\n  //     </div>\n  //\n  //     {expandTransition(\n  //       (style, item) =>\n  //         item && (\n  //           <animated.div {...{ style }}>\n  //             <Expand {...{ pages, setExpand, darkMode, windowSize }} />\n  //           </animated.div>\n  //         )\n  //     )}\n  //   </animated.div>\n  // ));\n} // function Expand({ pages, setExpand, darkMode, windowSize }) {\n//   const expandElement = useRef(null);\n//   const { t } = useTranslation();\n//\n//   const handleMouseLeave = useCallback(() => {\n//     windowSize.width >= 769 && setExpand(false);\n//   }, [setExpand, windowSize.width]);\n//\n//   return (\n//     <div className=\"expand\" ref={expandElement} onMouseLeave={handleMouseLeave}>\n//       {pages.map((page, i) => {\n//         if (page.showInNavbar === true) {\n//           return (\n//             <Link\n//               to={page.pageLink}\n//               key={i}\n//               {...(windowSize.width < 769 && {\n//                 onClick: setExpand.bind(this, false),\n//               })}\n//             >\n//               <span\n//                 {...navLinkProps(page.pageLink, page.animationDelayForNavbar)}\n//               >\n//                 {t(page.displayName)}\n//               </span>\n//             </Link>\n//           );\n//         }\n//         return null;\n//       })}\n//\n//       {windowSize.width < 769 && <SunMoon {...{ darkMode }} />}\n//\n//       <div className=\"expand-bottom\">\n//         <h5>{t(\"A crowdsourced initiative.\")}</h5>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n_s(Navbar, \"kNzzXevdhWJGLkWVmQfAOL8BhNU=\", false, function () {\n  return [useLockBodyScroll, usePageLeave];\n});\n\n_c = Navbar;\nexport default Navbar; // const navLinkProps = (path, animationDelay) => ({\n//   className: `${window.location.pathname === path ? \"focused\" : \"\"}`,\n// });\n// const activeNavIcon = (path) => ({\n//   style: {\n//     stroke: window.location.pathname === path ? \"#4c75f2\" : \"\",\n//   },\n// });\n// const SunMoon = ({ darkMode }) => {\n//   return (\n//     <div className=\"SunMoon\" onClick={darkMode.toggle}>\n//       <div>{darkMode.value ? <Sun color={\"#ffc107\"} /> : <Moon />}</div>\n//     </div>\n//   );\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["/Users/nawaf/code/Create-a-D3-Dashboard-With-React-/d3ia/src/components/Navbar.js"],"names":["useState","useLockBodyScroll","usePageLeave","Navbar","pages","showLanguageSwitcher","setShowLanguageSwitcher","expand","setExpand"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,OAAzB,C,CACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,WAAhD,C,CACA;;AAEA,SAASC,MAAT,CAAgB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,oBAAT;AAA+BC,EAAAA;AAA/B,CAAhB,EAA0E;AAAA;;AACxE;AACA;AACA;AACA;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC,CANwE,CAOxE;;AAEAC,EAAAA,iBAAiB,CAACM,MAAD,CAAjB,CATwE,CAUxE;;AAEAL,EAAAA,YAAY,CAAC,MAAMM,SAAS,CAAC,KAAD,CAAhB,CAAZ,CAZwE,CAcxtISL,M;UASPF,iB,EAGAC,Y;;;KAZOC,M;AAwIT,eAAeA,MAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import {\n//   SLIDE_IN,\n//   SLIDE_OUT,\n//   SLIDE_IN_MOBILE,\n//   SLIDE_OUT_MOBILE,\n// } from \"../animations\";\n// import locales from '../i18n/locales.json';\n\nimport { useState } from \"react\";\n// import { Book, HelpCircle, Home, Moon, Sun } from \"react-feather\";\n// import { useTranslation } from \"react-i18next\";\n// import { Link } from \"react-router-dom\";\n// import { useTransition, animated } from \"react-spring\";\nimport { useLockBodyScroll, usePageLeave } from \"react-use\";\n// import useDarkMode from \"use-dark-mode\";\n\nfunction Navbar({ pages, showLanguageSwitcher, setShowLanguageSwitcher }) {\n  // const {i18n, t} = useTranslation();\n  // const currentLanguage = Object.keys(locales).includes(i18n?.language)\n  //     ? i18n?.language\n  //     : i18n?.options?.fallbackLng[0];\n\n  const [expand, setExpand] = useState(false);\n  // const darkMode = useDarkMode(false);\n\n  useLockBodyScroll(expand);\n  // const windowSize = useWindowSize();\n\n  usePageLeave(() => setExpand(false));\n\n  // const navbarTransition = useTransition(true, {\n  //   from: { opacity: 0 },\n  //   enter: { opacity: 1 },\n  // });\n\n  // const expandTransition = useTransition(expand, {\n  //   from: windowSize.width < 769 ? SLIDE_IN_MOBILE : SLIDE_IN,\n  //   enter: windowSize.width < 769 ? SLIDE_OUT_MOBILE : SLIDE_OUT,\n  //   leave: windowSize.width < 769 ? SLIDE_IN_MOBILE : SLIDE_IN,\n  //   config: { mass: 1, tension: 210, friction: 26 },\n  // });\n\n  // const handleMouseEnter = useCallback(() => {\n  //   if (windowSize.width >= 769) {\n  //     setExpand(true);\n  //   }\n  // }, [windowSize.width]);\n\n  // const handleLanguageSwitcher = useCallback(() => {\n  //   if (expand) setExpand(false);\n  //   setShowLanguageSwitcher(!showLanguageSwitcher);\n  // }, [expand, showLanguageSwitcher, setExpand, setShowLanguageSwitcher]);\n\n  // return navbarTransition((style, item) => (\n  //   <animated.div className=\"Navbar\" {...{ style }}>\n  //     <div className=\"navbar-left\" onClick={handleLanguageSwitcher}>\n  //       {locales[currentLanguage]}\n  //     </div>\n  //\n  //     <div className=\"navbar-middle\">\n  //       <Link to=\"/\" onClick={setExpand.bind(this, false)}>\n  //         Covid19<span>India</span>\n  //       </Link>\n  //     </div>\n  //\n  //     <div\n  //       className=\"navbar-right\"\n  //       onMouseEnter={handleMouseEnter}\n  //       {...(windowSize.width < 769 && {\n  //         onClick: setExpand.bind(this, !expand),\n  //       })}\n  //     >\n  //       {windowSize.width < 769 && (\n  //         <span>{expand ? t(\"Close\") : t(\"Menu\")}</span>\n  //       )}\n  //\n  //       {windowSize.width >= 769 && (\n  //         <>\n  //           <Link to=\"/\">\n  //             <span>\n  //               <Home {...activeNavIcon(\"/\")} />\n  //             </span>\n  //           </Link>\n  //           <Link to=\"/blog\">\n  //             <span>\n  //               <Book {...activeNavIcon(\"/blog\")} />\n  //             </span>\n  //           </Link>\n  //           <Link to=\"/about\">\n  //             <span>\n  //               <HelpCircle {...activeNavIcon(\"/about\")} />\n  //             </span>\n  //           </Link>\n  //           <span>\n  //             <SunMoon {...{ darkMode }} />\n  //           </span>\n  //         </>\n  //       )}\n  //     </div>\n  //\n  //     {expandTransition(\n  //       (style, item) =>\n  //         item && (\n  //           <animated.div {...{ style }}>\n  //             <Expand {...{ pages, setExpand, darkMode, windowSize }} />\n  //           </animated.div>\n  //         )\n  //     )}\n  //   </animated.div>\n  // ));\n}\n\n// function Expand({ pages, setExpand, darkMode, windowSize }) {\n//   const expandElement = useRef(null);\n//   const { t } = useTranslation();\n//\n//   const handleMouseLeave = useCallback(() => {\n//     windowSize.width >= 769 && setExpand(false);\n//   }, [setExpand, windowSize.width]);\n//\n//   return (\n//     <div className=\"expand\" ref={expandElement} onMouseLeave={handleMouseLeave}>\n//       {pages.map((page, i) => {\n//         if (page.showInNavbar === true) {\n//           return (\n//             <Link\n//               to={page.pageLink}\n//               key={i}\n//               {...(windowSize.width < 769 && {\n//                 onClick: setExpand.bind(this, false),\n//               })}\n//             >\n//               <span\n//                 {...navLinkProps(page.pageLink, page.animationDelayForNavbar)}\n//               >\n//                 {t(page.displayName)}\n//               </span>\n//             </Link>\n//           );\n//         }\n//         return null;\n//       })}\n//\n//       {windowSize.width < 769 && <SunMoon {...{ darkMode }} />}\n//\n//       <div className=\"expand-bottom\">\n//         <h5>{t(\"A crowdsourced initiative.\")}</h5>\n//       </div>\n//     </div>\n//   );\n// }\n\nexport default Navbar;\n\n// const navLinkProps = (path, animationDelay) => ({\n//   className: `${window.location.pathname === path ? \"focused\" : \"\"}`,\n// });\n\n// const activeNavIcon = (path) => ({\n//   style: {\n//     stroke: window.location.pathname === path ? \"#4c75f2\" : \"\",\n//   },\n// });\n\n// const SunMoon = ({ darkMode }) => {\n//   return (\n//     <div className=\"SunMoon\" onClick={darkMode.toggle}>\n//       <div>{darkMode.value ? <Sun color={\"#ffc107\"} /> : <Moon />}</div>\n//     </div>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}